!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^ADD texcoord.z, texcoord, { 0, 0, 1, 0 };        $/;"	l
AR	Makefile	/^AR            = ar cqs$/;"	m
AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter() :$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:()
AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter(Entity *entity,const Matrix4 &transform) :$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	AnimatedMeshToShapeConverter();$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:()
AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	AnimatedMeshToShapeConverter(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^class AnimatedMeshToShapeConverter : public VertexIndexToShape$/;"	c	namespace:BtOgre	inherits:VertexIndexToShape
BIT	physLib/src/object/CollisionFilter.h	5;"	d
BoneIndex	physLib/src/btOgre/BtOgreGP.h	/^typedef std::map<unsigned char, Vector3Array*> BoneIndex;$/;"	t	namespace:BtOgre
BoneKeyIndex	physLib/src/btOgre/BtOgreGP.h	/^typedef std::pair<unsigned short, Vector3Array*> BoneKeyIndex;$/;"	t	namespace:BtOgre
BtOgre	physLib/src/btOgre/BtOgre.cpp	/^namespace BtOgre {$/;"	n	file:
BtOgre	physLib/src/btOgre/BtOgreExtras.h	/^namespace BtOgre$/;"	n
BtOgre	physLib/src/btOgre/BtOgreGP.h	/^namespace BtOgre {$/;"	n
BtOgre	physLib/src/btOgre/BtOgrePG.h	/^namespace BtOgre {$/;"	n
BtOgre::AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^class AnimatedMeshToShapeConverter : public VertexIndexToShape$/;"	c	namespace:BtOgre	inherits:VertexIndexToShape
BtOgre::AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter() :$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:()
BtOgre::AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter(Entity *entity,const Matrix4 &transform) :$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
BtOgre::AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	AnimatedMeshToShapeConverter();$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:()
BtOgre::AnimatedMeshToShapeConverter::AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	AnimatedMeshToShapeConverter(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::AnimatedMeshToShapeConverter::addEntity	physLib/src/btOgre/BtOgre.cpp	/^	void AnimatedMeshToShapeConverter::addEntity(Entity *entity,const Matrix4 &transform)$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
BtOgre::AnimatedMeshToShapeConverter::addEntity	physLib/src/btOgre/BtOgreGP.h	/^	void addEntity(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::AnimatedMeshToShapeConverter::addMesh	physLib/src/btOgre/BtOgre.cpp	/^	void AnimatedMeshToShapeConverter::addMesh(const MeshPtr &mesh, const Matrix4 &transform)$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(const MeshPtr &mesh, const Matrix4 &transform)
BtOgre::AnimatedMeshToShapeConverter::addMesh	physLib/src/btOgre/BtOgreGP.h	/^	void addMesh(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform)
BtOgre::AnimatedMeshToShapeConverter::createAlignedBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape* AnimatedMeshToShapeConverter::createAlignedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation)
BtOgre::AnimatedMeshToShapeConverter::createAlignedBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createAlignedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation)
BtOgre::AnimatedMeshToShapeConverter::createOrientedBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape *AnimatedMeshToShapeConverter::createOrientedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation)
BtOgre::AnimatedMeshToShapeConverter::createOrientedBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createOrientedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation)
BtOgre::AnimatedMeshToShapeConverter::getBoneVertices	physLib/src/btOgre/BtOgre.cpp	/^	bool AnimatedMeshToShapeConverter::getBoneVertices(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, unsigned int &vertex_count, Ogre::Vector3* &vertices, const Vector3 &bonePosition)
BtOgre::AnimatedMeshToShapeConverter::getBoneVertices	physLib/src/btOgre/BtOgreGP.h	/^	bool getBoneVertices(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:protected	signature:(unsigned char bone, unsigned int &vertex_count, Ogre::Vector3* &vertices, const Ogre::Vector3 &bonePosition)
BtOgre::AnimatedMeshToShapeConverter::getOrientedBox	physLib/src/btOgre/BtOgre.cpp	/^	bool AnimatedMeshToShapeConverter::getOrientedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation, Vector3 &box_afExtent, Vector3 *box_akAxis, Vector3 &box_kCenter)
BtOgre::AnimatedMeshToShapeConverter::getOrientedBox	physLib/src/btOgre/BtOgreGP.h	/^	bool getOrientedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:protected	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation, Ogre::Vector3 &extents, Ogre::Vector3 *axis, Ogre::Vector3 &center)
BtOgre::AnimatedMeshToShapeConverter::mEntity	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Entity*		mEntity;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
BtOgre::AnimatedMeshToShapeConverter::mNode	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::SceneNode*	mNode;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
BtOgre::AnimatedMeshToShapeConverter::mTransformedVerticesTemp	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3       *mTransformedVerticesTemp;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
BtOgre::AnimatedMeshToShapeConverter::mTransformedVerticesTempSize	physLib/src/btOgre/BtOgreGP.h	/^	size_t               mTransformedVerticesTempSize;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
BtOgre::AnimatedMeshToShapeConverter::~AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::~AnimatedMeshToShapeConverter()$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:()
BtOgre::AnimatedMeshToShapeConverter::~AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	~AnimatedMeshToShapeConverter();$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:()
BtOgre::BoneIndex	physLib/src/btOgre/BtOgreGP.h	/^typedef std::map<unsigned char, Vector3Array*> BoneIndex;$/;"	t	namespace:BtOgre
BtOgre::BoneKeyIndex	physLib/src/btOgre/BtOgreGP.h	/^typedef std::pair<unsigned short, Vector3Array*> BoneKeyIndex;$/;"	t	namespace:BtOgre
BtOgre::Convert	physLib/src/btOgre/BtOgreExtras.h	/^class Convert$/;"	c	namespace:BtOgre
BtOgre::Convert::Convert	physLib/src/btOgre/BtOgreExtras.h	/^	Convert() {};$/;"	f	class:BtOgre::Convert	access:public	signature:()
BtOgre::Convert::toBullet	physLib/src/btOgre/BtOgreExtras.h	/^	static btQuaternion toBullet(const Ogre::Quaternion &q)$/;"	f	class:BtOgre::Convert	access:public	signature:(const Ogre::Quaternion &q)
BtOgre::Convert::toBullet	physLib/src/btOgre/BtOgreExtras.h	/^	static btVector3 toBullet(const Ogre::Vector3 &v)$/;"	f	class:BtOgre::Convert	access:public	signature:(const Ogre::Vector3 &v)
BtOgre::Convert::toOgre	physLib/src/btOgre/BtOgreExtras.h	/^	static Ogre::Quaternion toOgre(const btQuaternion &q)$/;"	f	class:BtOgre::Convert	access:public	signature:(const btQuaternion &q)
BtOgre::Convert::toOgre	physLib/src/btOgre/BtOgreExtras.h	/^	static Ogre::Vector3 toOgre(const btVector3 &v)$/;"	f	class:BtOgre::Convert	access:public	signature:(const btVector3 &v)
BtOgre::Convert::~Convert	physLib/src/btOgre/BtOgreExtras.h	/^	~Convert() {};$/;"	f	class:BtOgre::Convert	access:public	signature:()
BtOgre::DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^class DebugDrawer : public btIDebugDraw$/;"	c	namespace:BtOgre	inherits:btIDebugDraw
BtOgre::DebugDrawer::DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	DebugDrawer(Ogre::SceneNode *node, btDynamicsWorld *world)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(Ogre::SceneNode *node, btDynamicsWorld *world)
BtOgre::DebugDrawer::draw3dText	physLib/src/btOgre/BtOgreExtras.h	/^	void draw3dText(const btVector3& location,const char* textString)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& location,const char* textString)
BtOgre::DebugDrawer::drawContactPoint	physLib/src/btOgre/BtOgreExtras.h	/^	void drawContactPoint(const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)
BtOgre::DebugDrawer::drawLine	physLib/src/btOgre/BtOgreExtras.h	/^	void drawLine(const btVector3& from,const btVector3& to,const btVector3& color)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& from,const btVector3& to,const btVector3& color)
BtOgre::DebugDrawer::getDebugMode	physLib/src/btOgre/BtOgreExtras.h	/^	int	getDebugMode() const$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:() const
BtOgre::DebugDrawer::mDebugOn	physLib/src/btOgre/BtOgreExtras.h	/^	bool mDebugOn;$/;"	m	class:BtOgre::DebugDrawer	access:protected
BtOgre::DebugDrawer::mLineDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	DynamicLines *mLineDrawer;$/;"	m	class:BtOgre::DebugDrawer	access:protected
BtOgre::DebugDrawer::mNode	physLib/src/btOgre/BtOgreExtras.h	/^	Ogre::SceneNode *mNode;$/;"	m	class:BtOgre::DebugDrawer	access:protected
BtOgre::DebugDrawer::mWorld	physLib/src/btOgre/BtOgreExtras.h	/^	btDynamicsWorld *mWorld;$/;"	m	class:BtOgre::DebugDrawer	access:protected
BtOgre::DebugDrawer::reportErrorWarning	physLib/src/btOgre/BtOgreExtras.h	/^	void reportErrorWarning(const char* warningString)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const char* warningString)
BtOgre::DebugDrawer::setDebugMode	physLib/src/btOgre/BtOgreExtras.h	/^	void setDebugMode(int isOn)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(int isOn)
BtOgre::DebugDrawer::step	physLib/src/btOgre/BtOgreExtras.h	/^	void step()$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:()
BtOgre::DebugDrawer::~DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	~DebugDrawer()$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:()
BtOgre::DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^class DynamicLines : public DynamicRenderable$/;"	c	namespace:BtOgre	inherits:DynamicRenderable
BtOgre::DynamicLines::Camera	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Camera Camera;$/;"	t	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::DynamicLines	physLib/src/btOgre/BtOgre.cpp	/^	DynamicLines::DynamicLines(OperationType opType)$/;"	f	class:BtOgre::DynamicLines	signature:(OperationType opType)
BtOgre::DynamicLines::DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^  DynamicLines(OperationType opType=Ogre::RenderOperation::OT_LINE_STRIP);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(OperationType opType=Ogre::RenderOperation::OT_LINE_STRIP)
BtOgre::DynamicLines::OperationType	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::RenderOperation::OperationType OperationType;$/;"	t	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::Quaternion	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Quaternion Quaternion;$/;"	t	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::Real	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Real Real;$/;"	t	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::Vector3	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Vector3 Vector3;$/;"	t	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::addPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::addPoint(Real x, Real y, Real z)$/;"	f	class:BtOgre::DynamicLines	signature:(Real x, Real y, Real z)
BtOgre::DynamicLines::addPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::addPoint(const Vector3 &p)$/;"	f	class:BtOgre::DynamicLines	signature:(const Vector3 &p)
BtOgre::DynamicLines::addPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void addPoint(Real x, Real y, Real z);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(Real x, Real y, Real z)
BtOgre::DynamicLines::addPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void addPoint(const Ogre::Vector3 &p);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(const Ogre::Vector3 &p)
BtOgre::DynamicLines::clear	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::clear()$/;"	f	class:BtOgre::DynamicLines	signature:()
BtOgre::DynamicLines::clear	physLib/src/btOgre/BtOgreExtras.h	/^  void clear();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
BtOgre::DynamicLines::createVertexDeclaration	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::createVertexDeclaration()$/;"	f	class:BtOgre::DynamicLines	signature:()
BtOgre::DynamicLines::createVertexDeclaration	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void createVertexDeclaration();$/;"	p	class:BtOgre::DynamicLines	access:protected	signature:()
BtOgre::DynamicLines::fillHardwareBuffers	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::fillHardwareBuffers()$/;"	f	class:BtOgre::DynamicLines	signature:()
BtOgre::DynamicLines::fillHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void fillHardwareBuffers();$/;"	p	class:BtOgre::DynamicLines	access:protected	signature:()
BtOgre::DynamicLines::getNumPoints	physLib/src/btOgre/BtOgre.cpp	/^	unsigned short DynamicLines::getNumPoints(void) const$/;"	f	class:BtOgre::DynamicLines	signature:(void) const
BtOgre::DynamicLines::getNumPoints	physLib/src/btOgre/BtOgreExtras.h	/^  unsigned short getNumPoints(void) const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(void) const
BtOgre::DynamicLines::getOperationType	physLib/src/btOgre/BtOgre.cpp	/^	RenderOperation::OperationType DynamicLines::getOperationType() const$/;"	f	class:BtOgre::DynamicLines	signature:() const
BtOgre::DynamicLines::getOperationType	physLib/src/btOgre/BtOgreExtras.h	/^  OperationType getOperationType() const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:() const
BtOgre::DynamicLines::getPoint	physLib/src/btOgre/BtOgre.cpp	/^	const Vector3& DynamicLines::getPoint(unsigned short index) const$/;"	f	class:BtOgre::DynamicLines	signature:(unsigned short index) const
BtOgre::DynamicLines::getPoint	physLib/src/btOgre/BtOgreExtras.h	/^  const Vector3& getPoint(unsigned short index) const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(unsigned short index) const
BtOgre::DynamicLines::mDirty	physLib/src/btOgre/BtOgreExtras.h	/^  bool mDirty;$/;"	m	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::mPoints	physLib/src/btOgre/BtOgreExtras.h	/^  std::vector<Vector3> mPoints;$/;"	m	class:BtOgre::DynamicLines	access:private
BtOgre::DynamicLines::setOperationType	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::setOperationType(OperationType opType)$/;"	f	class:BtOgre::DynamicLines	signature:(OperationType opType)
BtOgre::DynamicLines::setOperationType	physLib/src/btOgre/BtOgreExtras.h	/^  void setOperationType(OperationType opType);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(OperationType opType)
BtOgre::DynamicLines::setPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::setPoint(unsigned short index, const Vector3 &value)$/;"	f	class:BtOgre::DynamicLines	signature:(unsigned short index, const Vector3 &value)
BtOgre::DynamicLines::setPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void setPoint(unsigned short index, const Vector3 &value);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(unsigned short index, const Vector3 &value)
BtOgre::DynamicLines::update	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::update()$/;"	f	class:BtOgre::DynamicLines	signature:()
BtOgre::DynamicLines::update	physLib/src/btOgre/BtOgreExtras.h	/^  void update();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
BtOgre::DynamicLines::~DynamicLines	physLib/src/btOgre/BtOgre.cpp	/^	DynamicLines::~DynamicLines()$/;"	f	class:BtOgre::DynamicLines	signature:()
BtOgre::DynamicLines::~DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^  virtual ~DynamicLines();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
BtOgre::DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^class DynamicRenderable : public Ogre::SimpleRenderable$/;"	c	namespace:BtOgre	inherits:Ogre::SimpleRenderable
BtOgre::DynamicRenderable::DynamicRenderable	physLib/src/btOgre/BtOgre.cpp	/^	DynamicRenderable::DynamicRenderable()$/;"	f	class:BtOgre::DynamicRenderable	signature:()
BtOgre::DynamicRenderable::DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^  DynamicRenderable();$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:()
BtOgre::DynamicRenderable::createVertexDeclaration	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void createVertexDeclaration() = 0;$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:()
BtOgre::DynamicRenderable::fillHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void fillHardwareBuffers() = 0;$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:()
BtOgre::DynamicRenderable::getBoundingRadius	physLib/src/btOgre/BtOgre.cpp	/^	Real DynamicRenderable::getBoundingRadius(void) const$/;"	f	class:BtOgre::DynamicRenderable	signature:(void) const
BtOgre::DynamicRenderable::getBoundingRadius	physLib/src/btOgre/BtOgreExtras.h	/^  virtual Ogre::Real getBoundingRadius(void) const;$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(void) const
BtOgre::DynamicRenderable::getSquaredViewDepth	physLib/src/btOgre/BtOgre.cpp	/^	Real DynamicRenderable::getSquaredViewDepth(const Camera* cam) const$/;"	f	class:BtOgre::DynamicRenderable	signature:(const Camera* cam) const
BtOgre::DynamicRenderable::getSquaredViewDepth	physLib/src/btOgre/BtOgreExtras.h	/^  virtual Ogre::Real getSquaredViewDepth(const Ogre::Camera* cam) const;$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(const Ogre::Camera* cam) const
BtOgre::DynamicRenderable::initialize	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicRenderable::initialize(RenderOperation::OperationType operationType,$/;"	f	class:BtOgre::DynamicRenderable	signature:(RenderOperation::OperationType operationType, bool useIndices)
BtOgre::DynamicRenderable::initialize	physLib/src/btOgre/BtOgreExtras.h	/^  void initialize(Ogre::RenderOperation::OperationType operationType,$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(Ogre::RenderOperation::OperationType operationType, bool useIndices)
BtOgre::DynamicRenderable::mIndexBufferCapacity	physLib/src/btOgre/BtOgreExtras.h	/^  size_t mIndexBufferCapacity;$/;"	m	class:BtOgre::DynamicRenderable	access:protected
BtOgre::DynamicRenderable::mVertexBufferCapacity	physLib/src/btOgre/BtOgreExtras.h	/^  size_t mVertexBufferCapacity;$/;"	m	class:BtOgre::DynamicRenderable	access:protected
BtOgre::DynamicRenderable::prepareHardwareBuffers	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicRenderable::prepareHardwareBuffers(size_t vertexCount,$/;"	f	class:BtOgre::DynamicRenderable	signature:(size_t vertexCount, size_t indexCount)
BtOgre::DynamicRenderable::prepareHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  void prepareHardwareBuffers(size_t vertexCount, size_t indexCount);$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:(size_t vertexCount, size_t indexCount)
BtOgre::DynamicRenderable::~DynamicRenderable	physLib/src/btOgre/BtOgre.cpp	/^	DynamicRenderable::~DynamicRenderable()$/;"	f	class:BtOgre::DynamicRenderable	signature:()
BtOgre::DynamicRenderable::~DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^  virtual ~DynamicRenderable();$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:()
BtOgre::POSITION_BINDING	physLib/src/btOgre/BtOgre.cpp	/^	  POSITION_BINDING,$/;"	e	enum:BtOgre::__anon1	file:
BtOgre::RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^class RigidBodyState : public btMotionState$/;"	c	namespace:BtOgre	inherits:btMotionState
BtOgre::RigidBodyState::RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^        RigidBodyState(Ogre::SceneNode *node)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node)
BtOgre::RigidBodyState::RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^        RigidBodyState(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())
BtOgre::RigidBodyState::getWorldTransform	physLib/src/btOgre/BtOgrePG.h	/^        virtual void getWorldTransform(btTransform &ret) const$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(btTransform &ret) const
BtOgre::RigidBodyState::mCenterOfMassOffset	physLib/src/btOgre/BtOgrePG.h	/^        btTransform mCenterOfMassOffset;$/;"	m	class:BtOgre::RigidBodyState	access:protected
BtOgre::RigidBodyState::mNode	physLib/src/btOgre/BtOgrePG.h	/^        Ogre::SceneNode *mNode;$/;"	m	class:BtOgre::RigidBodyState	access:protected
BtOgre::RigidBodyState::mTransform	physLib/src/btOgre/BtOgrePG.h	/^        btTransform mTransform;$/;"	m	class:BtOgre::RigidBodyState	access:protected
BtOgre::RigidBodyState::setCenterOfMassOffset	physLib/src/btOgre/BtOgrePG.h	/^        void setCenterOfMassOffset(btTransform &offset)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(btTransform &offset)
BtOgre::RigidBodyState::setNode	physLib/src/btOgre/BtOgrePG.h	/^        void setNode(Ogre::SceneNode *node)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node)
BtOgre::RigidBodyState::setWorldTransform	physLib/src/btOgre/BtOgrePG.h	/^        virtual void setWorldTransform(const btTransform &in)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(const btTransform &in)
BtOgre::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^class StaticMeshToShapeConverter : public VertexIndexToShape$/;"	c	namespace:BtOgre	inherits:VertexIndexToShape
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter() :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:()
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter(Entity *entity,  const Matrix4 &transform) :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Entity *entity, const Matrix4 &transform)
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter(Renderable *rend, const Matrix4 &transform) :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Renderable *rend, const Matrix4 &transform)
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter();$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:()
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter(Ogre::Entity *entity,   const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::StaticMeshToShapeConverter::StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter(Ogre::Renderable *rend, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Renderable *rend, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::StaticMeshToShapeConverter::addEntity	physLib/src/btOgre/BtOgre.cpp	/^	void StaticMeshToShapeConverter::addEntity(Entity *entity,const Matrix4 &transform)$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
BtOgre::StaticMeshToShapeConverter::addEntity	physLib/src/btOgre/BtOgreGP.h	/^	void addEntity(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::StaticMeshToShapeConverter::addMesh	physLib/src/btOgre/BtOgre.cpp	/^	void StaticMeshToShapeConverter::addMesh(const MeshPtr &mesh, const Matrix4 &transform)$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(const MeshPtr &mesh, const Matrix4 &transform)
BtOgre::StaticMeshToShapeConverter::addMesh	physLib/src/btOgre/BtOgreGP.h	/^	void addMesh(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::StaticMeshToShapeConverter::mEntity	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Entity*		mEntity;$/;"	m	class:BtOgre::StaticMeshToShapeConverter	access:protected
BtOgre::StaticMeshToShapeConverter::mNode	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::SceneNode*	mNode;$/;"	m	class:BtOgre::StaticMeshToShapeConverter	access:protected
BtOgre::StaticMeshToShapeConverter::~StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::~StaticMeshToShapeConverter()$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:()
BtOgre::StaticMeshToShapeConverter::~StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	~StaticMeshToShapeConverter();$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:()
BtOgre::TEXCOORD_BINDING	physLib/src/btOgre/BtOgre.cpp	/^	  TEXCOORD_BINDING$/;"	e	enum:BtOgre::__anon1	file:
BtOgre::Vector3Array	physLib/src/btOgre/BtOgreExtras.h	/^typedef std::vector<Ogre::Vector3> Vector3Array;$/;"	t	namespace:BtOgre
BtOgre::VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^class VertexIndexToShape$/;"	c	namespace:BtOgre
BtOgre::VertexIndexToShape::VertexIndexToShape	physLib/src/btOgre/BtOgre.cpp	/^	VertexIndexToShape::VertexIndexToShape(const Matrix4 &transform) :$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const Matrix4 &transform)
BtOgre::VertexIndexToShape::VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^	VertexIndexToShape(const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:(const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
BtOgre::VertexIndexToShape::addAnimatedVertexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addAnimatedVertexData(const Ogre::VertexData *vertex_data,$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const Ogre::VertexData *vertex_data, const Ogre::VertexData *blend_data, const Ogre::Mesh::IndexMap *indexMap)
BtOgre::VertexIndexToShape::addAnimatedVertexData	physLib/src/btOgre/BtOgreGP.h	/^	void addAnimatedVertexData(const Ogre::VertexData *vertex_data,$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(const Ogre::VertexData *vertex_data, const Ogre::VertexData *blended_data, const Ogre::Mesh::IndexMap *indexMap)
BtOgre::VertexIndexToShape::addIndexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addIndexData(IndexData *data, const unsigned int offset)$/;"	f	class:BtOgre::VertexIndexToShape	signature:(IndexData *data, const unsigned int offset)
BtOgre::VertexIndexToShape::addIndexData	physLib/src/btOgre/BtOgreGP.h	/^	void addIndexData(Ogre::IndexData *data, const unsigned int offset = 0);$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(Ogre::IndexData *data, const unsigned int offset = 0)
BtOgre::VertexIndexToShape::addStaticVertexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addStaticVertexData(const VertexData *vertex_data)$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const VertexData *vertex_data)
BtOgre::VertexIndexToShape::addStaticVertexData	physLib/src/btOgre/BtOgreGP.h	/^	void addStaticVertexData(const Ogre::VertexData *vertex_data);$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(const Ogre::VertexData *vertex_data)
BtOgre::VertexIndexToShape::createBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape* VertexIndexToShape::createBox()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createBox();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::createCapsule	physLib/src/btOgre/BtOgre.cpp	/^	btCapsuleShape* VertexIndexToShape::createCapsule() {$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createCapsule	physLib/src/btOgre/BtOgreGP.h	/^	btCapsuleShape* createCapsule();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::createConvex	physLib/src/btOgre/BtOgre.cpp	/^	btConvexHullShape* VertexIndexToShape::createConvex()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createConvex	physLib/src/btOgre/BtOgreGP.h	/^	btConvexHullShape* createConvex();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::createCylinder	physLib/src/btOgre/BtOgre.cpp	/^	btCylinderShape* VertexIndexToShape::createCylinder()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createCylinder	physLib/src/btOgre/BtOgreGP.h	/^	btCylinderShape* createCylinder();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::createSphere	physLib/src/btOgre/BtOgre.cpp	/^	btSphereShape* VertexIndexToShape::createSphere()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createSphere	physLib/src/btOgre/BtOgreGP.h	/^	btSphereShape* createSphere();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::createTrimesh	physLib/src/btOgre/BtOgre.cpp	/^	btBvhTriangleMeshShape* VertexIndexToShape::createTrimesh()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::createTrimesh	physLib/src/btOgre/BtOgreGP.h	/^	btBvhTriangleMeshShape* createTrimesh();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getIndexCount	physLib/src/btOgre/BtOgre.cpp	/^	unsigned int VertexIndexToShape::getIndexCount()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getIndexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int getIndexCount();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getIndices	physLib/src/btOgre/BtOgre.cpp	/^	const unsigned int* VertexIndexToShape::getIndices()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getIndices	physLib/src/btOgre/BtOgreGP.h	/^	const unsigned int* getIndices();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getRadius	physLib/src/btOgre/BtOgre.cpp	/^	Real VertexIndexToShape::getRadius()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getRadius	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Real getRadius();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getSize	physLib/src/btOgre/BtOgre.cpp	/^	Vector3 VertexIndexToShape::getSize()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getSize	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3 getSize();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getVertexCount	physLib/src/btOgre/BtOgre.cpp	/^	unsigned int VertexIndexToShape::getVertexCount()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getVertexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int getVertexCount();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::getVertices	physLib/src/btOgre/BtOgre.cpp	/^	const Ogre::Vector3* VertexIndexToShape::getVertices()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::getVertices	physLib/src/btOgre/BtOgreGP.h	/^	const Ogre::Vector3* getVertices();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
BtOgre::VertexIndexToShape::mBoneIndex	physLib/src/btOgre/BtOgreGP.h	/^	BoneIndex           *mBoneIndex;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mBoundRadius	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Real		    mBoundRadius;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mBounds	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3		mBounds;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mIndexBuffer	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int*       mIndexBuffer;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mIndexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int        mIndexCount;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mScale	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3		mScale;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mTransform	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Matrix4		mTransform;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mVertexBuffer	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3*	    mVertexBuffer;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::mVertexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int        mVertexCount;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
BtOgre::VertexIndexToShape::~VertexIndexToShape	physLib/src/btOgre/BtOgre.cpp	/^	VertexIndexToShape::~VertexIndexToShape()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
BtOgre::VertexIndexToShape::~VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^	~VertexIndexToShape();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -g -Wall -W -D_REENTRANT -fPIE $(DEFINES)$/;"	m
CHARACTER	physLib/src/object/CollisionFilter.h	/^        CHARACTER = BIT(7)$/;"	e	enum:CollisionLayer::__anon4
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COLLISIONFILTER_H	physLib/src/object/CollisionFilter.h	2;"	d
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = cp -f$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT -fPIE $(DEFINES)$/;"	m
Camera	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Camera Camera;$/;"	t	class:BtOgre::DynamicLines	access:private
CollisionLayer	physLib/src/object/CollisionFilter.h	/^namespace CollisionLayer$/;"	n
CollisionLayer::CHARACTER	physLib/src/object/CollisionFilter.h	/^        CHARACTER = BIT(7)$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::DEFAULT	physLib/src/object/CollisionFilter.h	/^        DEFAULT = BIT(0),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::FIVE	physLib/src/object/CollisionFilter.h	/^        FIVE = BIT(5),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::FOUR	physLib/src/object/CollisionFilter.h	/^        FOUR = BIT(4),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::NOTHING	physLib/src/object/CollisionFilter.h	/^        NOTHING = 0,$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::ONE	physLib/src/object/CollisionFilter.h	/^        ONE = BIT(1),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::SIX	physLib/src/object/CollisionFilter.h	/^        SIX = BIT(6),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::THREE	physLib/src/object/CollisionFilter.h	/^        THREE = BIT(3),$/;"	e	enum:CollisionLayer::__anon4
CollisionLayer::TWO	physLib/src/object/CollisionFilter.h	/^        TWO = BIT(2),$/;"	e	enum:CollisionLayer::__anon4
Convert	physLib/src/btOgre/BtOgreExtras.h	/^	Convert() {};$/;"	f	class:BtOgre::Convert	access:public	signature:()
Convert	physLib/src/btOgre/BtOgreExtras.h	/^class Convert$/;"	c	namespace:BtOgre
ConvexShapez	physLib/src/object/Shape.h	/^namespace ConvexShapez {$/;"	n
ConvexShapez::box	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
ConvexShapez::capsule	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
ConvexShapez::convex	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
ConvexShapez::cylinder	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
ConvexShapez::none	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
ConvexShapez::setupShape	physLib/src/object/Shape.h	/^    inline btConvexShape* setupShape(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)$/;"	f	namespace:ConvexShapez	signature:(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)
ConvexShapez::sphere	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
DEFAULT	physLib/src/object/CollisionFilter.h	/^        DEFAULT = BIT(0),$/;"	e	enum:CollisionLayer::__anon4
DEFINES	Makefile	/^DEFINES       = -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = #avoid trailing-slash linebreak$/;"	m
DIST	Makefile	/^DIST          = \/opt\/Qt\/5.1.1\/gcc_64\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	DebugDrawer(Ogre::SceneNode *node, btDynamicsWorld *world)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(Ogre::SceneNode *node, btDynamicsWorld *world)
DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^class DebugDrawer : public btIDebugDraw$/;"	c	namespace:BtOgre	inherits:btIDebugDraw
DemoApp	source/DemoApp.cpp	/^DemoApp::DemoApp():rEngine(NULL),currentMode(NULL),insertMode(NULL),menuMode(NULL),world(NULL),INSERTMODE(false)$/;"	f	class:DemoApp	signature:()
DemoApp	source/DemoApp.h	/^	DemoApp();$/;"	p	class:DemoApp	access:public	signature:()
DemoApp	source/DemoApp.h	/^class DemoApp : public OIS::KeyListener, OIS::MouseListener$/;"	c	inherits:OIS::KeyListener,OIS::MouseListener
DemoApp::DemoApp	source/DemoApp.cpp	/^DemoApp::DemoApp():rEngine(NULL),currentMode(NULL),insertMode(NULL),menuMode(NULL),world(NULL),INSERTMODE(false)$/;"	f	class:DemoApp	signature:()
DemoApp::DemoApp	source/DemoApp.h	/^	DemoApp();$/;"	p	class:DemoApp	access:public	signature:()
DemoApp::INSERTMODE	source/DemoApp.h	/^    bool INSERTMODE;$/;"	m	class:DemoApp	access:private
DemoApp::currentMode	source/DemoApp.h	/^    Mode* currentMode;$/;"	m	class:DemoApp	access:private
DemoApp::insertMode	source/DemoApp.h	/^    Mode* insertMode;$/;"	m	class:DemoApp	access:private
DemoApp::keyPressed	source/DemoApp.cpp	/^bool DemoApp::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:DemoApp	signature:(const OIS::KeyEvent &keyEventRef)
DemoApp::keyPressed	source/DemoApp.h	/^	bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:DemoApp	access:public	signature:(const OIS::KeyEvent &keyEventRef)
DemoApp::keyReleased	source/DemoApp.cpp	/^bool DemoApp::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:DemoApp	signature:(const OIS::KeyEvent &keyEventRef)
DemoApp::keyReleased	source/DemoApp.h	/^	bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:DemoApp	access:public	signature:(const OIS::KeyEvent &keyEventRef)
DemoApp::m_bShutdown	source/DemoApp.h	/^	bool m_bShutdown;$/;"	m	class:DemoApp	access:private
DemoApp::menuMode	source/DemoApp.h	/^    Mode* menuMode;$/;"	m	class:DemoApp	access:private
DemoApp::mouseMoved	source/DemoApp.cpp	/^bool DemoApp::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt)
DemoApp::mouseMoved	source/DemoApp.h	/^	bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt)
DemoApp::mousePressed	source/DemoApp.cpp	/^bool DemoApp::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
DemoApp::mousePressed	source/DemoApp.h	/^	bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id); $/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
DemoApp::mouseReleased	source/DemoApp.cpp	/^bool DemoApp::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
DemoApp::mouseReleased	source/DemoApp.h	/^	bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
DemoApp::rEngine	source/DemoApp.h	/^    OgreFramework* rEngine;$/;"	m	class:DemoApp	access:private
DemoApp::runDemo	source/DemoApp.cpp	/^void DemoApp::runDemo()$/;"	f	class:DemoApp	signature:()
DemoApp::runDemo	source/DemoApp.h	/^	void runDemo();$/;"	p	class:DemoApp	access:private	signature:()
DemoApp::setupDemoScene	source/DemoApp.cpp	/^void DemoApp::setupDemoScene()$/;"	f	class:DemoApp	signature:()
DemoApp::setupDemoScene	source/DemoApp.h	/^    void setupDemoScene();$/;"	p	class:DemoApp	access:private	signature:()
DemoApp::startDemo	source/DemoApp.cpp	/^void DemoApp::startDemo()$/;"	f	class:DemoApp	signature:()
DemoApp::startDemo	source/DemoApp.h	/^	void startDemo();$/;"	p	class:DemoApp	access:public	signature:()
DemoApp::world	source/DemoApp.h	/^    World* world;$/;"	m	class:DemoApp	access:private
DemoApp::~DemoApp	source/DemoApp.cpp	/^DemoApp::~DemoApp()$/;"	f	class:DemoApp	signature:()
DemoApp::~DemoApp	source/DemoApp.h	/^	~DemoApp();$/;"	p	class:DemoApp	access:public	signature:()
DynamicLines	physLib/src/btOgre/BtOgre.cpp	/^	DynamicLines::DynamicLines(OperationType opType)$/;"	f	class:BtOgre::DynamicLines	signature:(OperationType opType)
DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^  DynamicLines(OperationType opType=Ogre::RenderOperation::OT_LINE_STRIP);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(OperationType opType=Ogre::RenderOperation::OT_LINE_STRIP)
DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^class DynamicLines : public DynamicRenderable$/;"	c	namespace:BtOgre	inherits:DynamicRenderable
DynamicRenderable	physLib/src/btOgre/BtOgre.cpp	/^	DynamicRenderable::DynamicRenderable()$/;"	f	class:BtOgre::DynamicRenderable	signature:()
DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^  DynamicRenderable();$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:()
DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^class DynamicRenderable : public Ogre::SimpleRenderable$/;"	c	namespace:BtOgre	inherits:Ogre::SimpleRenderable
FILEIO_H	source/FileIO.h	2;"	d
FIRSTPERSONNOCLIP_H	source/FirstPersonNoClip.h	2;"	d
FIVE	physLib/src/object/CollisionFilter.h	/^        FIVE = BIT(5),$/;"	e	enum:CollisionLayer::__anon4
FLR	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^FLR texcoord.z, texcoord;                        $/;"	l
FOUR	physLib/src/object/CollisionFilter.h	/^        FOUR = BIT(4),$/;"	e	enum:CollisionLayer::__anon4
FRC	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^FRC frac.x, fragment.texcoord[0].z;              $/;"	l
FileIO	source/FileIO.h	/^class FileIO$/;"	c
FileIO::beginsWith	source/FileIO.cpp	/^bool FileIO::beginsWith(std::string value, std::string bValue)$/;"	f	class:FileIO	signature:(std::string value, std::string bValue)
FileIO::beginsWith	source/FileIO.h	/^        static bool beginsWith(std::string value, std::string bValue);$/;"	p	class:FileIO	access:public	signature:(std::string value, std::string bValue)
FileIO::readFile	source/FileIO.cpp	/^std::vector<ModelInfo> FileIO::readFile(const char* filename, Ogre::SceneManager * scMgr)$/;"	f	class:FileIO	signature:(const char* filename, Ogre::SceneManager * scMgr)
FileIO::readFile	source/FileIO.h	/^        static std::vector<ModelInfo> readFile(const char* filename, Ogre::SceneManager * scMgr);$/;"	p	class:FileIO	access:public	signature:(const char* filename, Ogre::SceneManager * scMgr)
FileIO::stringToFloat	source/FileIO.cpp	/^float FileIO::stringToFloat(std::string str)$/;"	f	class:FileIO	signature:(std::string str)
FileIO::stringToFloat	source/FileIO.h	/^        static float stringToFloat(std::string str);$/;"	p	class:FileIO	access:public	signature:(std::string str)
FileIO::writeToFile	source/FileIO.cpp	/^void FileIO::writeToFile(std::vector<ModelInfo> modelContainer, const char* filename)$/;"	f	class:FileIO	signature:(std::vector<ModelInfo> modelContainer, const char* filename)
FileIO::writeToFile	source/FileIO.h	/^        static void writeToFile(std::vector<ModelInfo> modelContainer, const char* filename);$/;"	p	class:FileIO	access:public	signature:(std::vector<ModelInfo> modelContainer, const char* filename)
FirstPersonNoClip	source/FirstPersonNoClip.cpp	/^FirstPersonNoClip::FirstPersonNoClip(Ogre::Camera* cam)$/;"	f	class:FirstPersonNoClip	signature:(Ogre::Camera* cam)
FirstPersonNoClip	source/FirstPersonNoClip.h	/^        FirstPersonNoClip(Ogre::Camera*);$/;"	p	class:FirstPersonNoClip	access:public	signature:(Ogre::Camera*)
FirstPersonNoClip	source/FirstPersonNoClip.h	/^class FirstPersonNoClip$/;"	c
FirstPersonNoClip::FirstPersonNoClip	source/FirstPersonNoClip.cpp	/^FirstPersonNoClip::FirstPersonNoClip(Ogre::Camera* cam)$/;"	f	class:FirstPersonNoClip	signature:(Ogre::Camera* cam)
FirstPersonNoClip::FirstPersonNoClip	source/FirstPersonNoClip.h	/^        FirstPersonNoClip(Ogre::Camera*);$/;"	p	class:FirstPersonNoClip	access:public	signature:(Ogre::Camera*)
FirstPersonNoClip::getCameraToViewportRay	source/FirstPersonNoClip.cpp	/^Ogre::Ray FirstPersonNoClip::getCameraToViewportRay(Ogre::Real screenx, Ogre::Real screeny)$/;"	f	class:FirstPersonNoClip	signature:(Ogre::Real screenx, Ogre::Real screeny)
FirstPersonNoClip::getCameraToViewportRay	source/FirstPersonNoClip.h	/^        Ogre::Ray getCameraToViewportRay(Ogre::Real screenx, Ogre::Real screeny);$/;"	p	class:FirstPersonNoClip	access:public	signature:(Ogre::Real screenx, Ogre::Real screeny)
FirstPersonNoClip::getOrientation	source/FirstPersonNoClip.cpp	/^const Ogre::Quaternion& FirstPersonNoClip::getOrientation()$/;"	f	class:FirstPersonNoClip	signature:()
FirstPersonNoClip::getOrientation	source/FirstPersonNoClip.h	/^        const Ogre::Quaternion& getOrientation();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
FirstPersonNoClip::getPosition	source/FirstPersonNoClip.cpp	/^const Ogre::Vector3&    FirstPersonNoClip::getPosition()$/;"	f	class:FirstPersonNoClip	signature:()
FirstPersonNoClip::getPosition	source/FirstPersonNoClip.h	/^        const Ogre::Vector3&    getPosition();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
FirstPersonNoClip::mCam	source/FirstPersonNoClip.h	/^        Ogre::Camera* mCam;$/;"	m	class:FirstPersonNoClip	access:private
FirstPersonNoClip::mCameraMan	source/FirstPersonNoClip.h	/^        OgreBites::SdkCameraMan* mCameraMan;$/;"	m	class:FirstPersonNoClip	access:private
FirstPersonNoClip::mouseMoved	source/FirstPersonNoClip.cpp	/^bool FirstPersonNoClip::mouseMoved(const OIS::MouseEvent& evt)$/;"	f	class:FirstPersonNoClip	signature:(const OIS::MouseEvent& evt)
FirstPersonNoClip::mouseMoved	source/FirstPersonNoClip.h	/^        bool mouseMoved(const OIS::MouseEvent& evt);$/;"	p	class:FirstPersonNoClip	access:public	signature:(const OIS::MouseEvent& evt)
FirstPersonNoClip::update	source/FirstPersonNoClip.cpp	/^void FirstPersonNoClip::update(double timeSinceLastFrame, OIS::Keyboard* inputManager)$/;"	f	class:FirstPersonNoClip	signature:(double timeSinceLastFrame, OIS::Keyboard* inputManager)
FirstPersonNoClip::update	source/FirstPersonNoClip.h	/^        void update(double timeSinceLastFrame, OIS::Keyboard* inputManager);$/;"	p	class:FirstPersonNoClip	access:public	signature:(double timeSinceLastFrame, OIS::Keyboard* inputManager)
FirstPersonNoClip::~FirstPersonNoClip	source/FirstPersonNoClip.cpp	/^FirstPersonNoClip::~FirstPersonNoClip()$/;"	f	class:FirstPersonNoClip	signature:()
FirstPersonNoClip::~FirstPersonNoClip	source/FirstPersonNoClip.h	/^        ~FirstPersonNoClip();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
INCPATH	Makefile	/^INCPATH       = -I\/opt\/Qt\/5.1.1\/gcc_64\/mkspecs\/linux-g++ -I. -I..\/..\/..\/..\/ogre\/OGRE19\/sinbad-ogre-f7da7fe2d384\/OgreMain\/include -I..\/..\/..\/..\/ogre\/OGRE19\/sinbad-ogre-f7da7fe2d384\/Samples\/Common\/include -I..\/..\/..\/..\/ogre\/OGRE19\/sinbad-ogre-f7da7fe2d384\/Components\/Overlay\/include -I..\/..\/..\/..\/ogre\/OGRE19\/MADE\/include -I..\/..\/..\/..\/Downloads\/Gui3D-master\/build\/source -I..\/..\/..\/..\/Downloads\/Gui3D-master\/examples\/build -IphysLib\/src\/btOgre -IphysLib\/src\/object -IphysLib\/src\/world -I\/usr\/include\/OIS -I\/usr\/include\/bullet -Isource -I\/opt\/Qt\/5.1.1\/gcc_64\/include -I\/opt\/Qt\/5.1.1\/gcc_64\/include\/QtGui -I\/opt\/Qt\/5.1.1\/gcc_64\/include\/QtCore -I.$/;"	m
INSERTMODE	source/DemoApp.h	/^    bool INSERTMODE;$/;"	m	class:DemoApp	access:private
INSERTMODE_H	source/InsertMode.h	2;"	d
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
InsertMode	source/InsertMode.cpp	/^InsertMode::InsertMode():rMode(false),sMode(false)$/;"	f	class:InsertMode	signature:()
InsertMode	source/InsertMode.h	/^        InsertMode();$/;"	p	class:InsertMode	access:public	signature:()
InsertMode	source/InsertMode.h	/^class InsertMode:public Mode$/;"	c	inherits:Mode
InsertMode::InsertMode	source/InsertMode.cpp	/^InsertMode::InsertMode():rMode(false),sMode(false)$/;"	f	class:InsertMode	signature:()
InsertMode::InsertMode	source/InsertMode.h	/^        InsertMode();$/;"	p	class:InsertMode	access:public	signature:()
InsertMode::init	source/InsertMode.cpp	/^void InsertMode::init()$/;"	f	class:InsertMode	signature:()
InsertMode::init	source/InsertMode.h	/^        virtual void init();$/;"	p	class:InsertMode	access:public	signature:()
InsertMode::keyPressed	source/InsertMode.cpp	/^bool InsertMode::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:InsertMode	signature:(const OIS::KeyEvent &keyEventRef)
InsertMode::keyPressed	source/InsertMode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:InsertMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
InsertMode::keyReleased	source/InsertMode.cpp	/^bool InsertMode::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:InsertMode	signature:(const OIS::KeyEvent &keyEventRef)
InsertMode::keyReleased	source/InsertMode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:InsertMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
InsertMode::mouseMoved	source/InsertMode.cpp	/^bool InsertMode::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
InsertMode::mouseMoved	source/InsertMode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt)
InsertMode::mousePressed	source/InsertMode.cpp	/^bool InsertMode::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
InsertMode::mousePressed	source/InsertMode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
InsertMode::mouseReleased	source/InsertMode.cpp	/^bool InsertMode::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
InsertMode::mouseReleased	source/InsertMode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
InsertMode::rMode	source/InsertMode.h	/^        bool rMode;$/;"	m	class:InsertMode	access:private
InsertMode::rotateModel	source/InsertMode.cpp	/^void InsertMode::rotateModel(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
InsertMode::rotateModel	source/InsertMode.h	/^        void rotateModel(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:private	signature:(const OIS::MouseEvent &evt)
InsertMode::sMode	source/InsertMode.h	/^        bool sMode;$/;"	m	class:InsertMode	access:private
InsertMode::scaleModel	source/InsertMode.cpp	/^void InsertMode::scaleModel(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
InsertMode::scaleModel	source/InsertMode.h	/^        void scaleModel(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:private	signature:(const OIS::MouseEvent &evt)
InsertMode::update	source/InsertMode.cpp	/^void InsertMode::update(double timeSinceLastFrame)$/;"	f	class:InsertMode	signature:(double timeSinceLastFrame)
InsertMode::update	source/InsertMode.h	/^        virtual void update(double);$/;"	p	class:InsertMode	access:public	signature:(double)
LFLAGS	Makefile	/^LFLAGS        = -Wl,-rpath,\/opt\/Qt\/5.1.1\/gcc_64 -Wl,-rpath,\/opt\/Qt\/5.1.1\/gcc_64\/lib$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS) \/home\/afreak\/libs\/Gui3D\/gui3dBuilt\/bin\/Debug\/libgui3dBuilt.a -L\/home\/afreak\/ogre\/OGRE19\/MADE\/lib\/ -lOgreMain -lOIS -lOgreOverlay -lBulletDynamics -lBulletCollision -lLinearMath \/home\/afreak\/libs\/hPhys\/hPhys\/bin\/Debug\/libhPhys.a -L\/opt\/Qt\/5.1.1\/gcc_64\/lib -lQt5Gui -lQt5Core -lGL -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
LRP	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^LRP result.color, frac.x, c1, c0;                $/;"	l
MAINWINDOW_H	include/mainwindow.h	2;"	d
MAKEFILE	Makefile	/^MAKEFILE      = Makefile$/;"	m
MENUMODE_H	source/MenuMode.h	2;"	d
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MODE_H	source/Mode.h	3;"	d
MOV	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^MOV texcoord, fragment.texcoord[0];              $/;"	l
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MainWindow	include/mainwindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow	include/mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c	inherits:QMainWindow
MainWindow::MainWindow	include/mainwindow.h	/^    explicit MainWindow(QWidget *parent = 0);$/;"	p	class:MainWindow	access:public	signature:(QWidget *parent = 0)
MainWindow::ui	include/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
MainWindow::~MainWindow	include/mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
MenuMode	source/MenuMode.cpp	/^MenuMode::MenuMode()$/;"	f	class:MenuMode	signature:()
MenuMode	source/MenuMode.h	/^        MenuMode();$/;"	p	class:MenuMode	access:public	signature:()
MenuMode	source/MenuMode.h	/^class MenuMode:public Mode$/;"	c	inherits:Mode
MenuMode::MenuMode	source/MenuMode.cpp	/^MenuMode::MenuMode()$/;"	f	class:MenuMode	signature:()
MenuMode::MenuMode	source/MenuMode.h	/^        MenuMode();$/;"	p	class:MenuMode	access:public	signature:()
MenuMode::_createDemoPanel	source/MenuMode.cpp	/^void MenuMode::_createDemoPanel()$/;"	f	class:MenuMode	signature:()
MenuMode::_createDemoPanel	source/MenuMode.h	/^        void _createDemoPanel();$/;"	p	class:MenuMode	access:private	signature:()
MenuMode::getScreenCenterMouseDistance	source/MenuMode.cpp	/^Ogre::Vector2 MenuMode::getScreenCenterMouseDistance()$/;"	f	class:MenuMode	signature:()
MenuMode::getScreenCenterMouseDistance	source/MenuMode.h	/^        Ogre::Vector2 getScreenCenterMouseDistance();$/;"	p	class:MenuMode	access:private	signature:()
MenuMode::init	source/MenuMode.cpp	/^void MenuMode::init()$/;"	f	class:MenuMode	signature:()
MenuMode::init	source/MenuMode.h	/^        virtual void init();$/;"	p	class:MenuMode	access:public	signature:()
MenuMode::keyPressed	source/MenuMode.cpp	/^bool MenuMode::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:MenuMode	signature:(const OIS::KeyEvent &keyEventRef)
MenuMode::keyPressed	source/MenuMode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:MenuMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
MenuMode::keyReleased	source/MenuMode.cpp	/^bool MenuMode::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:MenuMode	signature:(const OIS::KeyEvent &keyEventRef)
MenuMode::keyReleased	source/MenuMode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:MenuMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
MenuMode::mGui3D	source/MenuMode.h	/^        Gui3D::Gui3D* mGui3D;$/;"	m	class:MenuMode	access:private
MenuMode::mMousePointer	source/MenuMode.h	/^        Gorilla::Rectangle* mMousePointer;$/;"	m	class:MenuMode	access:private
MenuMode::mMousePointerLayer	source/MenuMode.h	/^        Gorilla::Layer* mMousePointerLayer;$/;"	m	class:MenuMode	access:private
MenuMode::mMyPurplePanelColors	source/MenuMode.h	/^        MyPurplePanelColors mMyPurplePanelColors;$/;"	m	class:MenuMode	access:private
MenuMode::mNormalizedMousePosition	source/MenuMode.h	/^        Ogre::Vector2 mNormalizedMousePosition;$/;"	m	class:MenuMode	access:private
MenuMode::mouseMoved	source/MenuMode.cpp	/^bool MenuMode::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt)
MenuMode::mouseMoved	source/MenuMode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt)
MenuMode::mousePressed	source/MenuMode.cpp	/^bool MenuMode::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
MenuMode::mousePressed	source/MenuMode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
MenuMode::mouseReleased	source/MenuMode.cpp	/^bool MenuMode::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
MenuMode::mouseReleased	source/MenuMode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
MenuMode::totalCombobox	source/MenuMode.h	/^        Gui3D::Combobox* totalCombobox;$/;"	m	class:MenuMode	access:private
MenuMode::update	source/MenuMode.cpp	/^void MenuMode::update(double timeSinceLastFrame)$/;"	f	class:MenuMode	signature:(double timeSinceLastFrame)
MenuMode::update	source/MenuMode.h	/^        virtual void update(double);$/;"	p	class:MenuMode	access:public	signature:(double)
MenuMode::widgetDistance	source/MenuMode.h	/^        float widgetDistance;$/;"	m	class:MenuMode	access:private
Mode	source/Mode.cpp	/^Mode::Mode()$/;"	f	class:Mode	signature:()
Mode	source/Mode.h	/^        Mode();$/;"	p	class:Mode	access:public	signature:()
Mode	source/Mode.h	/^class Mode$/;"	c
Mode::Mode	source/Mode.cpp	/^Mode::Mode()$/;"	f	class:Mode	signature:()
Mode::Mode	source/Mode.h	/^        Mode();$/;"	p	class:Mode	access:public	signature:()
Mode::_boxHeight	source/Mode.cpp	/^int                         Mode::_boxHeight    = Mode::_width\/2;$/;"	m	class:Mode	file:
Mode::_boxHeight	source/Mode.h	/^        static int _boxHeight;$/;"	m	class:Mode	access:protected
Mode::_distance	source/Mode.cpp	/^int                         Mode::_distance     = 100;$/;"	m	class:Mode	file:
Mode::_distance	source/Mode.h	/^        static int _distance;$/;"	m	class:Mode	access:protected
Mode::_height	source/Mode.cpp	/^int                         Mode::_height       = 400;$/;"	m	class:Mode	file:
Mode::_height	source/Mode.h	/^        static int _height;$/;"	m	class:Mode	access:protected
Mode::_wP	source/Mode.cpp	/^int                         Mode::_wP           = Mode::_width-Mode::_widthPadding;$/;"	m	class:Mode	file:
Mode::_wP	source/Mode.h	/^        static int _wP;$/;"	m	class:Mode	access:protected
Mode::_width	source/Mode.cpp	/^int                         Mode::_width        = 400;$/;"	m	class:Mode	file:
Mode::_width	source/Mode.h	/^        static int _width;$/;"	m	class:Mode	access:protected
Mode::_widthPadding	source/Mode.cpp	/^int                         Mode::_widthPadding = 20;$/;"	m	class:Mode	file:
Mode::_widthPadding	source/Mode.h	/^        static int _widthPadding;$/;"	m	class:Mode	access:protected
Mode::addModel	source/Mode.cpp	/^bool Mode::addModel(Gui3D::Combobox* e)$/;"	f	class:Mode	signature:(Gui3D::Combobox* e)
Mode::addModel	source/Mode.h	/^        bool addModel(Gui3D::Combobox* e); $/;"	p	class:Mode	access:protected	signature:(Gui3D::Combobox* e)
Mode::addToComboBox	source/Mode.cpp	/^void Mode::addToComboBox(std::string modelName)$/;"	f	class:Mode	signature:(std::string modelName)
Mode::addToComboBox	source/Mode.h	/^        void addToComboBox(std::string modelName);$/;"	p	class:Mode	access:protected	signature:(std::string modelName)
Mode::addedCombobox	source/Mode.cpp	/^Gui3D::Combobox*            Mode::addedCombobox =NULL;$/;"	m	class:Mode	file:
Mode::addedCombobox	source/Mode.h	/^        static Gui3D::Combobox* addedCombobox;$/;"	m	class:Mode	access:protected
Mode::addedModels	source/Mode.cpp	/^std::vector<Ogre::String>   Mode::addedModels;$/;"	m	class:Mode	file:
Mode::addedModels	source/Mode.h	/^        static std::vector<Ogre::String> addedModels;$/;"	m	class:Mode	access:protected
Mode::captionCombobox	source/Mode.cpp	/^Gui3D::Caption*             Mode::captionCombobox=NULL;$/;"	m	class:Mode	file:
Mode::captionCombobox	source/Mode.h	/^        static Gui3D::Caption* captionCombobox;$/;"	m	class:Mode	access:protected
Mode::createModelFileIndex	source/Mode.cpp	/^std::string Mode::createModelFileIndex(Ogre::String modelName)$/;"	f	class:Mode	signature:(Ogre::String modelName)
Mode::createModelFileIndex	source/Mode.h	/^        std::string createModelFileIndex(Ogre::String modelName);$/;"	p	class:Mode	access:protected	signature:(Ogre::String modelName)
Mode::currentModel	source/Mode.cpp	/^ModelInfo*                  Mode::currentModel  =NULL;$/;"	m	class:Mode	file:
Mode::currentModel	source/Mode.h	/^        static ModelInfo * currentModel;$/;"	m	class:Mode	access:protected
Mode::destroyCombobox	source/Mode.cpp	/^void Mode::destroyCombobox()$/;"	f	class:Mode	signature:()
Mode::destroyCombobox	source/Mode.h	/^        void destroyCombobox();$/;"	p	class:Mode	access:protected	signature:()
Mode::hasEnding	source/Mode.cpp	/^bool Mode::hasEnding(std::string const &fullString, std::string const &ending)$/;"	f	class:Mode	signature:(std::string const &fullString, std::string const &ending)
Mode::hasEnding	source/Mode.h	/^        bool hasEnding(std::string const &fullString, std::string const &ending); $/;"	p	class:Mode	access:protected	signature:(std::string const &fullString, std::string const &ending)
Mode::init	source/Mode.h	/^        virtual void init()=0;$/;"	p	class:Mode	access:public	signature:()
Mode::keyPressed	source/Mode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
Mode::keyReleased	source/Mode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
Mode::makeCombobox	source/Mode.cpp	/^void Mode::makeCombobox(std::string& totalName)$/;"	f	class:Mode	signature:(std::string& totalName)
Mode::makeCombobox	source/Mode.h	/^        void makeCombobox(std::string& totalName);$/;"	p	class:Mode	access:protected	signature:(std::string& totalName)
Mode::modelContainer	source/Mode.cpp	/^std::vector<ModelInfo>Mode::modelContainer;$/;"	m	class:Mode	file:
Mode::modelContainer	source/Mode.h	/^        static std::vector<ModelInfo> modelContainer;$/;"	m	class:Mode	access:protected
Mode::modelDistance	source/Mode.cpp	/^float                       Mode::modelDistance =4.0f;$/;"	m	class:Mode	file:
Mode::modelDistance	source/Mode.h	/^        static float modelDistance;$/;"	m	class:Mode	access:protected
Mode::modelsPlaced	source/Mode.cpp	/^unsigned int                Mode::modelsPlaced  =0;$/;"	m	class:Mode	file:
Mode::modelsPlaced	source/Mode.h	/^        static unsigned int modelsPlaced;$/;"	m	class:Mode	access:protected
Mode::mouseMoved	source/Mode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt)
Mode::mousePressed	source/Mode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
Mode::mouseReleased	source/Mode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
Mode::moveModel	source/Mode.cpp	/^void Mode::moveModel()$/;"	f	class:Mode	signature:()
Mode::moveModel	source/Mode.h	/^        void moveModel();$/;"	p	class:Mode	access:protected	signature:()
Mode::noneSelected	source/Mode.cpp	/^std::string                 Mode::noneSelected = "Select Model for placing";$/;"	m	class:Mode	file:
Mode::noneSelected	source/Mode.h	/^        static std::string noneSelected; $/;"	m	class:Mode	access:protected
Mode::panel	source/Mode.cpp	/^Gui3D::Panel*               Mode::panel         =NULL;$/;"	m	class:Mode	file:
Mode::panel	source/Mode.h	/^        static Gui3D::Panel* panel;$/;"	m	class:Mode	access:protected
Mode::rEngine	source/Mode.cpp	/^OgreFramework*              Mode::rEngine       =NULL;$/;"	m	class:Mode	file:
Mode::rEngine	source/Mode.h	/^        static OgreFramework* rEngine;$/;"	m	class:Mode	access:protected
Mode::selectModel	source/Mode.cpp	/^bool Mode::selectModel(Gui3D::Combobox* e)$/;"	f	class:Mode	signature:(Gui3D::Combobox* e)
Mode::selectModel	source/Mode.h	/^        bool selectModel(Gui3D::Combobox* e);$/;"	p	class:Mode	access:protected	signature:(Gui3D::Combobox* e)
Mode::setCaptionText	source/Mode.cpp	/^void Mode::setCaptionText(std::string modelName)$/;"	f	class:Mode	signature:(std::string modelName)
Mode::setCaptionText	source/Mode.h	/^        void setCaptionText(std::string modelName);$/;"	p	class:Mode	access:protected	signature:(std::string modelName)
Mode::setWorld	source/Mode.cpp	/^void Mode::setWorld(World* _world)$/;"	f	class:Mode	signature:(World* _world)
Mode::setWorld	source/Mode.h	/^        void setWorld(World* _world);$/;"	p	class:Mode	access:public	signature:(World* _world)
Mode::totalModels	source/Mode.cpp	/^std::vector<Ogre::String>   Mode::totalModels;$/;"	m	class:Mode	file:
Mode::totalModels	source/Mode.h	/^        static std::vector<Ogre::String> totalModels;$/;"	m	class:Mode	access:protected
Mode::update	source/Mode.h	/^        virtual void update(double)=0;$/;"	p	class:Mode	access:public	signature:(double)
Mode::world	source/Mode.cpp	/^World*                      Mode::world         =NULL;$/;"	m	class:Mode	file:
Mode::world	source/Mode.h	/^        static World* world;$/;"	m	class:Mode	access:protected
Mode::zDistance	source/Mode.cpp	/^float                       Mode::zDistance     =0.0f;$/;"	m	class:Mode	file:
Mode::zDistance	source/Mode.h	/^        static float zDistance;$/;"	m	class:Mode	access:protected
Mode::~Mode	source/Mode.cpp	/^Mode::~Mode()$/;"	f	class:Mode	signature:()
Mode::~Mode	source/Mode.h	/^        ~Mode();$/;"	p	class:Mode	access:public	signature:()
ModelInfo	source/FileIO.h	/^struct ModelInfo$/;"	s
ModelInfo::entity	source/FileIO.h	/^    Ogre::Entity* entity;$/;"	m	struct:ModelInfo	access:public
ModelInfo::name	source/FileIO.h	/^    Ogre::String name;$/;"	m	struct:ModelInfo	access:public
ModelInfo::rigidBody	source/FileIO.h	/^    RigidBody* rigidBody;$/;"	m	struct:ModelInfo	access:public
ModelInfo::rotationNode	source/FileIO.h	/^    Ogre::SceneNode* rotationNode;$/;"	m	struct:ModelInfo	access:public
ModelInfo::scaleNode	source/FileIO.h	/^    Ogre::SceneNode* scaleNode;$/;"	m	struct:ModelInfo	access:public
ModelInfo::translationNode	source/FileIO.h	/^    Ogre::SceneNode* translationNode;$/;"	m	struct:ModelInfo	access:public
MyPurplePanelColors	source/MyPurplePanelColors.cpp	/^MyPurplePanelColors::MyPurplePanelColors()$/;"	f	class:MyPurplePanelColors	signature:()
MyPurplePanelColors	source/MyPurplePanelColors.h	/^    MyPurplePanelColors();$/;"	p	struct:MyPurplePanelColors	access:public	signature:()
MyPurplePanelColors	source/MyPurplePanelColors.h	/^struct MyPurplePanelColors : public Gui3D::PanelColors$/;"	s	inherits:Gui3D::PanelColors
MyPurplePanelColors::MyPurplePanelColors	source/MyPurplePanelColors.cpp	/^MyPurplePanelColors::MyPurplePanelColors()$/;"	f	class:MyPurplePanelColors	signature:()
MyPurplePanelColors::MyPurplePanelColors	source/MyPurplePanelColors.h	/^    MyPurplePanelColors();$/;"	p	struct:MyPurplePanelColors	access:public	signature:()
MyPurplePanelColors_H	source/MyPurplePanelColors.h	27;"	d
NOTHING	physLib/src/object/CollisionFilter.h	/^        NOTHING = 0,$/;"	e	enum:CollisionLayer::__anon4
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OBJECT_H	physLib/src/object/object.h	2;"	d
OGRE_DEMO_H	source/DemoApp.h	4;"	d
OGRE_FRAMEWORK_H	source/OgreFramework.h	4;"	d
ONE	physLib/src/object/CollisionFilter.h	/^        ONE = BIT(1),$/;"	e	enum:CollisionLayer::__anon4
Object	physLib/src/object/object.cpp	/^Object::Object()$/;"	f	class:Object	signature:()
Object	physLib/src/object/object.h	/^    Object();$/;"	p	class:Object	access:public	signature:()
Object	physLib/src/object/object.h	/^class Object$/;"	c
Object::Object	physLib/src/object/object.cpp	/^Object::Object()$/;"	f	class:Object	signature:()
Object::Object	physLib/src/object/object.h	/^    Object();$/;"	p	class:Object	access:public	signature:()
Object::mWorld	physLib/src/object/object.cpp	/^btDiscreteDynamicsWorld* Object::mWorld=NULL;$/;"	m	class:Object	file:
Object::mWorld	physLib/src/object/object.h	/^    static btDiscreteDynamicsWorld* mWorld;$/;"	m	class:Object	access:protected
Object::setWorld	physLib/src/object/object.cpp	/^void Object::setWorld(btDiscreteDynamicsWorld* world)$/;"	f	class:Object	signature:(btDiscreteDynamicsWorld* world)
Object::setWorld	physLib/src/object/object.h	/^    static void setWorld(btDiscreteDynamicsWorld* world);$/;"	p	class:Object	access:public	signature:(btDiscreteDynamicsWorld* world)
Object::~Object	physLib/src/object/object.cpp	/^Object::~Object()$/;"	f	class:Object	signature:()
Object::~Object	physLib/src/object/object.h	/^    ~Object();$/;"	p	class:Object	access:public	signature:()
OgreFramework	source/OgreFramework.cpp	/^OgreFramework::OgreFramework()$/;"	f	class:OgreFramework	signature:()
OgreFramework	source/OgreFramework.h	/^	OgreFramework();$/;"	p	class:OgreFramework	access:public	signature:()
OgreFramework	source/OgreFramework.h	/^	OgreFramework(const OgreFramework&);$/;"	p	class:OgreFramework	access:private	signature:(const OgreFramework&)
OgreFramework	source/OgreFramework.h	/^class OgreFramework : public Ogre::Singleton<OgreFramework>, OIS::KeyListener, OIS::MouseListener$/;"	c	inherits:Ogre::Singleton,OIS::KeyListener,OIS::MouseListener
OgreFramework::OgreFramework	source/OgreFramework.cpp	/^OgreFramework::OgreFramework()$/;"	f	class:OgreFramework	signature:()
OgreFramework::OgreFramework	source/OgreFramework.h	/^	OgreFramework();$/;"	p	class:OgreFramework	access:public	signature:()
OgreFramework::OgreFramework	source/OgreFramework.h	/^	OgreFramework(const OgreFramework&);$/;"	p	class:OgreFramework	access:private	signature:(const OgreFramework&)
OgreFramework::groupNames	source/OgreFramework.h	/^    std::vector<Ogre::String> groupNames;$/;"	m	class:OgreFramework	access:public
OgreFramework::initOgre	source/OgreFramework.cpp	/^bool OgreFramework::initOgre(Ogre::String wndTitle, OIS::KeyListener *pKeyListener, OIS::MouseListener *pMouseListener)$/;"	f	class:OgreFramework	signature:(Ogre::String wndTitle, OIS::KeyListener *pKeyListener, OIS::MouseListener *pMouseListener)
OgreFramework::initOgre	source/OgreFramework.h	/^	bool initOgre(Ogre::String wndTitle, OIS::KeyListener *pKeyListener = 0, OIS::MouseListener *pMouseListener = 0);$/;"	p	class:OgreFramework	access:public	signature:(Ogre::String wndTitle, OIS::KeyListener *pKeyListener = 0, OIS::MouseListener *pMouseListener = 0)
OgreFramework::isOgreToBeShutDown	source/OgreFramework.h	/^	bool isOgreToBeShutDown()const{return m_bShutDownOgre;}$/;"	f	class:OgreFramework	access:public	signature:() const
OgreFramework::keyPressed	source/OgreFramework.cpp	/^bool OgreFramework::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:OgreFramework	signature:(const OIS::KeyEvent &keyEventRef)
OgreFramework::keyPressed	source/OgreFramework.h	/^	bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::KeyEvent &keyEventRef)
OgreFramework::keyReleased	source/OgreFramework.cpp	/^bool OgreFramework::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:OgreFramework	signature:(const OIS::KeyEvent &keyEventRef)
OgreFramework::keyReleased	source/OgreFramework.h	/^	bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::KeyEvent &keyEventRef)
OgreFramework::mFPC	source/OgreFramework.h	/^    FirstPersonNoClip*          mFPC;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_FrameEvent	source/OgreFramework.h	/^    Ogre::FrameEvent                        m_FrameEvent;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_MoveScale	source/OgreFramework.h	/^	float					m_MoveScale; $/;"	m	class:OgreFramework	access:private
OgreFramework::m_MoveSpeed	source/OgreFramework.h	/^	Ogre::Real				m_MoveSpeed; $/;"	m	class:OgreFramework	access:private
OgreFramework::m_RotScale	source/OgreFramework.h	/^	Ogre::Degree				m_RotScale;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_RotateSpeed	source/OgreFramework.h	/^	Ogre::Degree				m_RotateSpeed; $/;"	m	class:OgreFramework	access:private
OgreFramework::m_bShutDownOgre	source/OgreFramework.h	/^	bool					m_bShutDownOgre;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_iNumScreenShots	source/OgreFramework.h	/^	int					m_iNumScreenShots;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_pCamQuat	source/OgreFramework.h	/^    Ogre::Quaternion            m_pCamQuat;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_pCamera	source/OgreFramework.h	/^	Ogre::Camera*				m_pCamera;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_pInputMgr	source/OgreFramework.h	/^	OIS::InputManager*			m_pInputMgr;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pKeyboard	source/OgreFramework.h	/^	OIS::Keyboard*				m_pKeyboard;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pLog	source/OgreFramework.h	/^	Ogre::Log*				m_pLog;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pMouse	source/OgreFramework.h	/^	OIS::Mouse*				m_pMouse;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pRenderWnd	source/OgreFramework.h	/^	Ogre::RenderWindow*			m_pRenderWnd;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pRoot	source/OgreFramework.h	/^	Ogre::Root*				m_pRoot;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pSceneMgr	source/OgreFramework.h	/^	Ogre::SceneManager*			m_pSceneMgr;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pTimer	source/OgreFramework.h	/^	Ogre::Timer*				m_pTimer;$/;"	m	class:OgreFramework	access:public
OgreFramework::m_pTrayMgr	source/OgreFramework.h	/^	OgreBites::SdkTrayManager*	        m_pTrayMgr;$/;"	m	class:OgreFramework	access:private
OgreFramework::m_pViewport	source/OgreFramework.h	/^	Ogre::Viewport*				m_pViewport;$/;"	m	class:OgreFramework	access:public
OgreFramework::mouseMoved	source/OgreFramework.cpp	/^bool OgreFramework::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt)
OgreFramework::mouseMoved	source/OgreFramework.h	/^	bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt)
OgreFramework::mousePressed	source/OgreFramework.cpp	/^bool OgreFramework::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
OgreFramework::mousePressed	source/OgreFramework.h	/^	bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id); $/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
OgreFramework::mouseReleased	source/OgreFramework.cpp	/^bool OgreFramework::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
OgreFramework::mouseReleased	source/OgreFramework.h	/^	bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
OgreFramework::operator =	source/OgreFramework.h	/^	OgreFramework& operator= (const OgreFramework&);$/;"	p	class:OgreFramework	access:private	signature:(const OgreFramework&)
OgreFramework::updateOgre	source/OgreFramework.cpp	/^void OgreFramework::updateOgre(double timeSinceLastFrame)$/;"	f	class:OgreFramework	signature:(double timeSinceLastFrame)
OgreFramework::updateOgre	source/OgreFramework.h	/^	void updateOgre(double timeSinceLastFrame);$/;"	p	class:OgreFramework	access:public	signature:(double timeSinceLastFrame)
OgreFramework::~OgreFramework	source/OgreFramework.cpp	/^OgreFramework::~OgreFramework()$/;"	f	class:OgreFramework	signature:()
OgreFramework::~OgreFramework	source/OgreFramework.h	/^	~OgreFramework();$/;"	p	class:OgreFramework	access:public	signature:()
OgreWidget	include/OgreWidget.h	/^  OgreWidget( QWidget *parent=0 ):$/;"	f	class:OgreWidget	access:public	signature:( QWidget *parent=0 )
OgreWidget	include/OgreWidget.h	/^class OgreWidget : public QGLWidget$/;"	c	inherits:QGLWidget
OgreWidget::OgreWidget	include/OgreWidget.h	/^  OgreWidget( QWidget *parent=0 ):$/;"	f	class:OgreWidget	access:public	signature:( QWidget *parent=0 )
OgreWidget::chooseRenderer	include/OgreWidget.h	/^  virtual Ogre::RenderSystem* chooseRenderer( Ogre::RenderSystemList* );$/;"	p	class:OgreWidget	access:protected	signature:( Ogre::RenderSystemList* )
OgreWidget::init	include/OgreWidget.h	/^  void init( std::string, std::string, std::string );$/;"	p	class:OgreWidget	access:protected	signature:( std::string, std::string, std::string )
OgreWidget::initializeGL	include/OgreWidget.h	/^  virtual void initializeGL();$/;"	p	class:OgreWidget	access:protected	signature:()
OgreWidget::loadResources	include/OgreWidget.h	/^  void loadResources(void);$/;"	p	class:OgreWidget	access:protected	signature:(void)
OgreWidget::mCamera	include/OgreWidget.h	/^  Ogre::Camera *mCamera;$/;"	m	class:OgreWidget	access:protected
OgreWidget::mOgreRoot	include/OgreWidget.h	/^  Ogre::Root *mOgreRoot;$/;"	m	class:OgreWidget	access:protected
OgreWidget::mOgreWindow	include/OgreWidget.h	/^  Ogre::RenderWindow *mOgreWindow;$/;"	m	class:OgreWidget	access:protected
OgreWidget::mResourcesCfg	include/OgreWidget.h	/^  Ogre::String mResourcesCfg;$/;"	m	class:OgreWidget	access:protected
OgreWidget::mSceneMgr	include/OgreWidget.h	/^  Ogre::SceneManager *mSceneMgr;$/;"	m	class:OgreWidget	access:protected
OgreWidget::mViewport	include/OgreWidget.h	/^  Ogre::Viewport *mViewport;$/;"	m	class:OgreWidget	access:protected
OgreWidget::paintGL	include/OgreWidget.h	/^  virtual void paintGL();$/;"	p	class:OgreWidget	access:protected	signature:()
OgreWidget::resizeGL	include/OgreWidget.h	/^  virtual void resizeGL( int, int );$/;"	p	class:OgreWidget	access:protected	signature:( int, int )
OgreWidget::setupResources	include/OgreWidget.h	/^  void setupResources(void);$/;"	p	class:OgreWidget	access:protected	signature:(void)
OgreWidget::~OgreWidget	include/OgreWidget.h	/^  virtual ~OgreWidget()$/;"	f	class:OgreWidget	access:public	signature:()
OperationType	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::RenderOperation::OperationType OperationType;$/;"	t	class:BtOgre::DynamicLines	access:private
POSITION_BINDING	physLib/src/btOgre/BtOgre.cpp	/^	  POSITION_BINDING,$/;"	e	enum:BtOgre::__anon1	file:
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = gorge.xctbl$/;"	m
Quaternion	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Quaternion Quaternion;$/;"	t	class:BtOgre::DynamicLines	access:private
RANLIB	Makefile	/^RANLIB        = $/;"	m
RIGIDBODYSTATEANIMATED_H	physLib/src/object/rigidbodystateanimated.h	2;"	d
RIGIDBODY_H	physLib/src/object/rigidbody.h	2;"	d
Real	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Real Real;$/;"	t	class:BtOgre::DynamicLines	access:private
RigidBody	physLib/src/object/rigidbody.cpp	/^RigidBody::RigidBody(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)$/;"	f	class:RigidBody	signature:(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)
RigidBody	physLib/src/object/rigidbody.h	/^    RigidBody(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask);$/;"	p	class:RigidBody	access:public	signature:(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)
RigidBody	physLib/src/object/rigidbody.h	/^class RigidBody:public Object,public btRigidBody$/;"	c	inherits:Object,btRigidBody
RigidBody::RigidBody	physLib/src/object/rigidbody.cpp	/^RigidBody::RigidBody(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)$/;"	f	class:RigidBody	signature:(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)
RigidBody::RigidBody	physLib/src/object/rigidbody.h	/^    RigidBody(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask);$/;"	p	class:RigidBody	access:public	signature:(btScalar mass, btMotionState* motionState,btCollisionShape* collisionShape,btVector3&localInertia, int group, int mask)
RigidBody::mtnState	physLib/src/object/rigidbody.h	/^    btMotionState* mtnState;$/;"	m	class:RigidBody	access:private
RigidBody::~RigidBody	physLib/src/object/rigidbody.cpp	/^RigidBody::~RigidBody()$/;"	f	class:RigidBody	signature:()
RigidBody::~RigidBody	physLib/src/object/rigidbody.h	/^    ~RigidBody();$/;"	p	class:RigidBody	access:public	signature:()
RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^        RigidBodyState(Ogre::SceneNode *node)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node)
RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^        RigidBodyState(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())
RigidBodyState	physLib/src/btOgre/BtOgrePG.h	/^class RigidBodyState : public btMotionState$/;"	c	namespace:BtOgre	inherits:btMotionState
RigidBodyStateAnimated	physLib/src/object/rigidbodystateanimated.h	/^    RigidBodyStateAnimated(Ogre::SceneNode *node)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::SceneNode *node)
RigidBodyStateAnimated	physLib/src/object/rigidbodystateanimated.h	/^    RigidBodyStateAnimated(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())
RigidBodyStateAnimated	physLib/src/object/rigidbodystateanimated.h	/^class RigidBodyStateAnimated:public BtOgre::RigidBodyState$/;"	c	inherits:BtOgre::RigidBodyState
RigidBodyStateAnimated::RigidBodyStateAnimated	physLib/src/object/rigidbodystateanimated.h	/^    RigidBodyStateAnimated(Ogre::SceneNode *node)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::SceneNode *node)
RigidBodyStateAnimated::RigidBodyStateAnimated	physLib/src/object/rigidbodystateanimated.h	/^    RigidBodyStateAnimated(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::SceneNode *node, const btTransform &transform, const btTransform &offset = btTransform::getIdentity())
RigidBodyStateAnimated::body	physLib/src/object/rigidbodystateanimated.h	/^    btRigidBody* body;$/;"	m	class:RigidBodyStateAnimated	access:private
RigidBodyStateAnimated::entity	physLib/src/object/rigidbodystateanimated.h	/^    Ogre::Entity* entity;$/;"	m	class:RigidBodyStateAnimated	access:private
RigidBodyStateAnimated::getWorldTransform	physLib/src/object/rigidbodystateanimated.h	/^    virtual void getWorldTransform(btTransform &ret) const$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(btTransform &ret) const
RigidBodyStateAnimated::setEntity	physLib/src/object/rigidbodystateanimated.h	/^    void setEntity(Ogre::Entity* entityInThis)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::Entity* entityInThis)
RigidBodyStateAnimated::setRigidBody	physLib/src/object/rigidbodystateanimated.h	/^    void setRigidBody(btRigidBody* bodyInThis,int wtShape)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(btRigidBody* bodyInThis,int wtShape)
RigidBodyStateAnimated::setWorldTransform	physLib/src/object/rigidbodystateanimated.h	/^    virtual void setWorldTransform(const btTransform &in)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(const btTransform &in)
RigidBodyStateAnimated::whatShape	physLib/src/object/rigidbodystateanimated.h	/^    int whatShape;$/;"	m	class:RigidBodyStateAnimated	access:private
SED	Makefile	/^SED           = sed$/;"	m
SHAPE_H	physLib/src/object/Shape.h	2;"	d
SIX	physLib/src/object/CollisionFilter.h	/^        SIX = BIT(6),$/;"	e	enum:CollisionLayer::__anon4
SOFTBODY_H	physLib/src/object/softbody.h	2;"	d
SOURCES	Makefile	/^SOURCES       = source\/main.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
Shapez	physLib/src/object/Shape.cpp	/^namespace Shapez$/;"	n	file:
Shapez	physLib/src/object/Shape.h	/^namespace Shapez$/;"	n
Shapez::allignedBox	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::box	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::capsule	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::convex	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::cylinder	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::none	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::orientedBox	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::setupShape	physLib/src/object/Shape.h	/^   inline btCollisionShape* setupShape(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)$/;"	f	namespace:Shapez	signature:(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)
Shapez::setupShapeAnimated	physLib/src/object/Shape.h	/^   inline btCollisionShape* setupShapeAnimated(int shapeType, BtOgre::AnimatedMeshToShapeConverter& converter)$/;"	f	namespace:Shapez	signature:(int shapeType, BtOgre::AnimatedMeshToShapeConverter& converter)
Shapez::sphere	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
Shapez::trimesh	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter() :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:()
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter(Entity *entity,  const Matrix4 &transform) :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Entity *entity, const Matrix4 &transform)
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::StaticMeshToShapeConverter(Renderable *rend, const Matrix4 &transform) :$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Renderable *rend, const Matrix4 &transform)
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter();$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:()
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter(Ogre::Entity *entity,   const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	StaticMeshToShapeConverter(Ogre::Renderable *rend, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Renderable *rend, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^class StaticMeshToShapeConverter : public VertexIndexToShape$/;"	c	namespace:BtOgre	inherits:VertexIndexToShape
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = gorge.xctbl$/;"	m
TEMP	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^TEMP texcoord, c0, c1, frac;                     $/;"	l
TEX	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^TEX c0, texcoord, texture[0], ARRAY2D;           $/;"	l
TEX	OgreFiles/media/materials/programs/Example_TextureArrayPS.asm	/^TEX c1, texcoord, texture[0], ARRAY2D;           $/;"	l
TEXCOORD_BINDING	physLib/src/btOgre/BtOgre.cpp	/^	  TEXCOORD_BINDING$/;"	e	enum:BtOgre::__anon1	file:
THIRDPERSONCONTROLLER_H	physLib/src/object/thirdpersoncontroller.h	2;"	d
THREE	physLib/src/object/CollisionFilter.h	/^        THREE = BIT(3),$/;"	e	enum:CollisionLayer::__anon4
TWO	physLib/src/object/CollisionFilter.h	/^        TWO = BIT(2),$/;"	e	enum:CollisionLayer::__anon4
ThirdPersonController	physLib/src/object/thirdpersoncontroller.cpp	/^ThirdPersonController::ThirdPersonController$/;"	f	class:ThirdPersonController	signature:(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset,btKinematicCharacterController* charController ,btPairCachingGhostObject* ghostObj, Ogre::Node* prntNode, int resolX, int resolY,btDiscreteDynamicsWorld* world)
ThirdPersonController	physLib/src/object/thirdpersoncontroller.h	/^    ThirdPersonController(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset, btKinematicCharacterController* charController,$/;"	p	class:ThirdPersonController	access:public	signature:(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset, btKinematicCharacterController* charController, btPairCachingGhostObject* ghostObj, Ogre::Node* prntNode, int resolX, int resolY,btDiscreteDynamicsWorld* world)
ThirdPersonController	physLib/src/object/thirdpersoncontroller.h	/^class ThirdPersonController$/;"	c
ThirdPersonController::ThirdPersonController	physLib/src/object/thirdpersoncontroller.cpp	/^ThirdPersonController::ThirdPersonController$/;"	f	class:ThirdPersonController	signature:(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset,btKinematicCharacterController* charController ,btPairCachingGhostObject* ghostObj, Ogre::Node* prntNode, int resolX, int resolY,btDiscreteDynamicsWorld* world)
ThirdPersonController::ThirdPersonController	physLib/src/object/thirdpersoncontroller.h	/^    ThirdPersonController(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset, btKinematicCharacterController* charController,$/;"	p	class:ThirdPersonController	access:public	signature:(Ogre::Vector3 pOffset, Ogre::Quaternion rOffset, btKinematicCharacterController* charController, btPairCachingGhostObject* ghostObj, Ogre::Node* prntNode, int resolX, int resolY,btDiscreteDynamicsWorld* world)
ThirdPersonController::cAngle	physLib/src/object/thirdpersoncontroller.h	/^    btScalar cAngle;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::cPosOffset	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Vector3 cPosOffset;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::cPrntNode	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Node* cPrntNode;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::cRotOffset	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Quaternion cRotOffset;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::camCollideLayer	physLib/src/object/thirdpersoncontroller.h	/^    int camCollideLayer;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::mWorld	physLib/src/object/thirdpersoncontroller.h	/^    btDiscreteDynamicsWorld* mWorld;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::m_character	physLib/src/object/thirdpersoncontroller.h	/^    btKinematicCharacterController* m_character;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::m_ghostObject	physLib/src/object/thirdpersoncontroller.h	/^    btPairCachingGhostObject* m_ghostObject;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::resX	physLib/src/object/thirdpersoncontroller.h	/^    int resX;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::resY	physLib/src/object/thirdpersoncontroller.h	/^    int resY;$/;"	m	class:ThirdPersonController	access:private
ThirdPersonController::setCameraCollisionLayer	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setCameraCollisionLayer(int layer)$/;"	f	class:ThirdPersonController	signature:(int layer)
ThirdPersonController::setCameraCollisionLayer	physLib/src/object/thirdpersoncontroller.h	/^    void setCameraCollisionLayer(int layer);$/;"	p	class:ThirdPersonController	access:public	signature:(int layer)
ThirdPersonController::setOffsetPosition	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setOffsetPosition(const Ogre::Vector3& offset)$/;"	f	class:ThirdPersonController	signature:(const Ogre::Vector3& offset)
ThirdPersonController::setOffsetPosition	physLib/src/object/thirdpersoncontroller.h	/^    void setOffsetPosition(const Ogre::Vector3& offset);$/;"	p	class:ThirdPersonController	access:public	signature:(const Ogre::Vector3& offset)
ThirdPersonController::setOffsetRotation	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setOffsetRotation(const Ogre::Quaternion& offset)$/;"	f	class:ThirdPersonController	signature:(const Ogre::Quaternion& offset)
ThirdPersonController::setOffsetRotation	physLib/src/object/thirdpersoncontroller.h	/^    void setOffsetRotation(const Ogre::Quaternion& offset);$/;"	p	class:ThirdPersonController	access:public	signature:(const Ogre::Quaternion& offset)
ThirdPersonController::updateCamera	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::updateCamera(Ogre::Camera* mCamera,int mouseX, int mouseY)$/;"	f	class:ThirdPersonController	signature:(Ogre::Camera* mCamera,int mouseX, int mouseY)
ThirdPersonController::updateCamera	physLib/src/object/thirdpersoncontroller.h	/^    void updateCamera(Ogre::Camera* mCamera,int mouseX, int mouseY);$/;"	p	class:ThirdPersonController	access:public	signature:(Ogre::Camera* mCamera,int mouseX, int mouseY)
ThirdPersonController::updateCharacter	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::updateCharacter(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)$/;"	f	class:ThirdPersonController	signature:(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)
ThirdPersonController::updateCharacter	physLib/src/object/thirdpersoncontroller.h	/^    void updateCharacter(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt);$/;"	p	class:ThirdPersonController	access:public	signature:(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)
Ui	include/mainwindow.h	/^namespace Ui {$/;"	n
Vector3	physLib/src/btOgre/BtOgreExtras.h	/^  typedef Ogre::Vector3 Vector3;$/;"	t	class:BtOgre::DynamicLines	access:private
Vector3Array	physLib/src/btOgre/BtOgreExtras.h	/^typedef std::vector<Ogre::Vector3> Vector3Array;$/;"	t	namespace:BtOgre
VertexIndexToShape	physLib/src/btOgre/BtOgre.cpp	/^	VertexIndexToShape::VertexIndexToShape(const Matrix4 &transform) :$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const Matrix4 &transform)
VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^	VertexIndexToShape(const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:(const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^class VertexIndexToShape$/;"	c	namespace:BtOgre
WIN32_LEAN_AND_MEAN	source/main.cpp	60;"	d	file:
WORLDBASE_H	physLib/src/world/worldbase.h	2;"	d
WORLDSINGLETHREAD_H	physLib/src/world/worldsinglethread.h	2;"	d
WORLD_H	physLib/src/world/world.h	2;"	d
WinMain	source/main.cpp	/^INT WINAPI WinMain(HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT)$/;"	f	signature:(HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT)
World	physLib/src/world/world.cpp	/^World::World(btScalar averageFPS,btScalar lowestFPS,btVector3 gravity):mWorld(NULL)$/;"	f	class:World	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3 gravity)
World	physLib/src/world/world.h	/^    World(btScalar averageFPS=60.0,btScalar lowestFPS=12.0, btVector3 gravity=btVector3(0.0,-10.0,0.0));$/;"	p	class:World	access:public	signature:(btScalar averageFPS=60.0,btScalar lowestFPS=12.0, btVector3 gravity=btVector3(0.0,-10.0,0.0))
World	physLib/src/world/world.h	/^class World$/;"	c
World::World	physLib/src/world/world.cpp	/^World::World(btScalar averageFPS,btScalar lowestFPS,btVector3 gravity):mWorld(NULL)$/;"	f	class:World	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3 gravity)
World::World	physLib/src/world/world.h	/^    World(btScalar averageFPS=60.0,btScalar lowestFPS=12.0, btVector3 gravity=btVector3(0.0,-10.0,0.0));$/;"	p	class:World	access:public	signature:(btScalar averageFPS=60.0,btScalar lowestFPS=12.0, btVector3 gravity=btVector3(0.0,-10.0,0.0))
World::addAnimatedRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addAnimatedRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
World::addAnimatedRigidBody	physLib/src/world/world.h	/^    RigidBody* addAnimatedRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
World::addKinematicRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addKinematicRigidBody(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
World::addKinematicRigidBody	physLib/src/world/world.h	/^    RigidBody* addKinematicRigidBody(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
World::addPointToPointConstraint	physLib/src/world/world.cpp	/^btPoint2PointConstraint* World::addPointToPointConstraint(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)$/;"	f	class:World	signature:(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)
World::addPointToPointConstraint	physLib/src/world/world.h	/^    btPoint2PointConstraint* addPointToPointConstraint(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB);$/;"	p	class:World	access:public	signature:(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)
World::addRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType, int group,int mask,btTransform offset)$/;"	f	class:World	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType, int group,int mask,btTransform offset)
World::addRigidBody	physLib/src/world/world.h	/^    RigidBody* addRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType, int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER,btTransform offset=btTransform(btTransform::getIdentity()));$/;"	p	class:World	access:public	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType, int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER,btTransform offset=btTransform(btTransform::getIdentity()))
World::addStaticRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addStaticRigidBody(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
World::addStaticRigidBody	physLib/src/world/world.h	/^    RigidBody* addStaticRigidBody(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
World::addThirdPersonController	physLib/src/world/world.cpp	/^ThirdPersonController* World::addThirdPersonController(int resolutionX, int resolutionY,Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold$/;"	f	class:World	signature:(int resolutionX, int resolutionY,Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold ,Ogre::Vector3 posOffset, Ogre::Quaternion rotOffset)
World::addThirdPersonController	physLib/src/world/world.h	/^    ThirdPersonController* addThirdPersonController(int resolutionX, int resolutionY, Ogre::Entity* entity ,int shapeType$/;"	p	class:World	access:public	signature:(int resolutionX, int resolutionY, Ogre::Entity* entity ,int shapeType ,int group=CollisionLayer::CHARACTER,int mask=CollisionLayer::DEFAULT, btScalar contactProcessingTreshold=0.0 ,Ogre::Vector3 posOffset=Ogre::Vector3(0.0,0.0,0.0), Ogre::Quaternion rotOffset=Ogre::Quaternion(0.0,0.0,0.0,0.0))
World::collisionShapes	physLib/src/world/world.h	/^    std::vector<btCollisionShape*> collisionShapes;$/;"	m	class:World	access:private
World::enableDebugging	physLib/src/world/world.cpp	/^void World::enableDebugging(Ogre::SceneNode* rootSceneNode)$/;"	f	class:World	signature:(Ogre::SceneNode* rootSceneNode)
World::enableDebugging	physLib/src/world/world.h	/^    void enableDebugging(Ogre::SceneNode* rootSceneNode);$/;"	p	class:World	access:public	signature:(Ogre::SceneNode* rootSceneNode)
World::getWorld	physLib/src/world/world.cpp	/^btDiscreteDynamicsWorld* World::getWorld()$/;"	f	class:World	signature:()
World::getWorld	physLib/src/world/world.h	/^    btDiscreteDynamicsWorld* getWorld();$/;"	p	class:World	access:public	signature:()
World::initNormal	physLib/src/world/world.cpp	/^void World::initNormal(btScalar averageFPS,btScalar lowestFPS,btVector3& gravity)$/;"	f	class:World	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3& gravity)
World::initNormal	physLib/src/world/world.h	/^    void initNormal(btScalar averageFPS,btScalar lowestFPS,btVector3 &gravity);$/;"	p	class:World	access:private	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3 &gravity)
World::mWorld	physLib/src/world/world.h	/^    WorldBase * mWorld;$/;"	m	class:World	access:private
World::nodeToBullet	physLib/src/world/world.cpp	/^btTransform World::nodeToBullet(Ogre::SceneNode* node)$/;"	f	class:World	signature:(Ogre::SceneNode* node)
World::nodeToBullet	physLib/src/world/world.h	/^    btTransform nodeToBullet(Ogre::SceneNode* node);$/;"	p	class:World	access:private	signature:(Ogre::SceneNode* node)
World::step	physLib/src/world/world.cpp	/^void World::step(btScalar timeStep)$/;"	f	class:World	signature:(btScalar timeStep)
World::step	physLib/src/world/world.h	/^    void step(btScalar timeStep);$/;"	p	class:World	access:public	signature:(btScalar timeStep)
World::stepDebug	physLib/src/world/world.cpp	/^void World::stepDebug()$/;"	f	class:World	signature:()
World::stepDebug	physLib/src/world/world.h	/^    void stepDebug();$/;"	p	class:World	access:public	signature:()
World::~World	physLib/src/world/world.cpp	/^World::~World()$/;"	f	class:World	signature:()
World::~World	physLib/src/world/world.h	/^    ~World();$/;"	p	class:World	access:public	signature:()
WorldBase	physLib/src/world/worldbase.cpp	/^WorldBase::WorldBase(btScalar averageFPS,btScalar lowestFPS):avgFPS(btScalar(1.0)\/averageFPS),$/;"	f	class:WorldBase	signature:(btScalar averageFPS,btScalar lowestFPS)
WorldBase	physLib/src/world/worldbase.h	/^    WorldBase(btScalar averageFPS,btScalar lowestFPS);$/;"	p	class:WorldBase	access:public	signature:(btScalar averageFPS,btScalar lowestFPS)
WorldBase	physLib/src/world/worldbase.h	/^class WorldBase$/;"	c
WorldBase::WorldBase	physLib/src/world/worldbase.cpp	/^WorldBase::WorldBase(btScalar averageFPS,btScalar lowestFPS):avgFPS(btScalar(1.0)\/averageFPS),$/;"	f	class:WorldBase	signature:(btScalar averageFPS,btScalar lowestFPS)
WorldBase::WorldBase	physLib/src/world/worldbase.h	/^    WorldBase(btScalar averageFPS,btScalar lowestFPS);$/;"	p	class:WorldBase	access:public	signature:(btScalar averageFPS,btScalar lowestFPS)
WorldBase::avgFPS	physLib/src/world/worldbase.h	/^    btScalar avgFPS;$/;"	m	class:WorldBase	access:protected
WorldBase::broadphase	physLib/src/world/worldbase.h	/^    btBroadphaseInterface* broadphase;$/;"	m	class:WorldBase	access:protected
WorldBase::collisionConfiguration	physLib/src/world/worldbase.h	/^    btDefaultCollisionConfiguration* collisionConfiguration;$/;"	m	class:WorldBase	access:protected
WorldBase::dispatcher	physLib/src/world/worldbase.h	/^    btCollisionDispatcher* dispatcher;$/;"	m	class:WorldBase	access:protected
WorldBase::enableDebugging	physLib/src/world/worldbase.cpp	/^void WorldBase::enableDebugging(Ogre::SceneNode* rootSceneNode)$/;"	f	class:WorldBase	signature:(Ogre::SceneNode* rootSceneNode)
WorldBase::enableDebugging	physLib/src/world/worldbase.h	/^    void enableDebugging(Ogre::SceneNode* rootSceneNode);$/;"	p	class:WorldBase	access:public	signature:(Ogre::SceneNode* rootSceneNode)
WorldBase::getWorld	physLib/src/world/worldbase.cpp	/^btDiscreteDynamicsWorld* WorldBase::getWorld()$/;"	f	class:WorldBase	signature:()
WorldBase::getWorld	physLib/src/world/worldbase.h	/^    btDiscreteDynamicsWorld* getWorld();$/;"	p	class:WorldBase	access:public	signature:()
WorldBase::init	physLib/src/world/worldbase.h	/^    virtual void init(btVector3 & gravity)=0;$/;"	p	class:WorldBase	access:public	signature:(btVector3 & gravity)
WorldBase::mDebugDrawer	physLib/src/world/worldbase.h	/^    BtOgre::DebugDrawer* mDebugDrawer;$/;"	m	class:WorldBase	access:protected
WorldBase::maxSubSteps	physLib/src/world/worldbase.h	/^    int maxSubSteps;$/;"	m	class:WorldBase	access:protected
WorldBase::solver	physLib/src/world/worldbase.h	/^    btSequentialImpulseConstraintSolver* solver;$/;"	m	class:WorldBase	access:protected
WorldBase::step	physLib/src/world/worldbase.cpp	/^void WorldBase::step(btScalar timeStep)$/;"	f	class:WorldBase	signature:(btScalar timeStep)
WorldBase::step	physLib/src/world/worldbase.h	/^    void step(btScalar timeStep);$/;"	p	class:WorldBase	access:public	signature:(btScalar timeStep)
WorldBase::stepDebug	physLib/src/world/worldbase.cpp	/^void WorldBase::stepDebug()$/;"	f	class:WorldBase	signature:()
WorldBase::stepDebug	physLib/src/world/worldbase.h	/^    void stepDebug();$/;"	p	class:WorldBase	access:public	signature:()
WorldBase::world	physLib/src/world/worldbase.h	/^    btDiscreteDynamicsWorld* world;$/;"	m	class:WorldBase	access:protected
WorldBase::~WorldBase	physLib/src/world/worldbase.cpp	/^WorldBase::~WorldBase()$/;"	f	class:WorldBase	signature:()
WorldBase::~WorldBase	physLib/src/world/worldbase.h	/^    ~WorldBase();$/;"	p	class:WorldBase	access:public	signature:()
_BtOgreGP_H_	physLib/src/btOgre/BtOgrePG.h	18;"	d
_BtOgrePG_H_	physLib/src/btOgre/BtOgreGP.h	18;"	d
_BtOgreShapes_H_	physLib/src/btOgre/BtOgreExtras.h	17;"	d
__OGREWIDGET_H__	include/OgreWidget.h	2;"	d
_boxHeight	source/Mode.cpp	/^int                         Mode::_boxHeight    = Mode::_width\/2;$/;"	m	class:Mode	file:
_boxHeight	source/Mode.h	/^        static int _boxHeight;$/;"	m	class:Mode	access:protected
_createDemoPanel	source/MenuMode.cpp	/^void MenuMode::_createDemoPanel()$/;"	f	class:MenuMode	signature:()
_createDemoPanel	source/MenuMode.h	/^        void _createDemoPanel();$/;"	p	class:MenuMode	access:private	signature:()
_distance	source/Mode.cpp	/^int                         Mode::_distance     = 100;$/;"	m	class:Mode	file:
_distance	source/Mode.h	/^        static int _distance;$/;"	m	class:Mode	access:protected
_height	source/Mode.cpp	/^int                         Mode::_height       = 400;$/;"	m	class:Mode	file:
_height	source/Mode.h	/^        static int _height;$/;"	m	class:Mode	access:protected
_wP	source/Mode.cpp	/^int                         Mode::_wP           = Mode::_width-Mode::_widthPadding;$/;"	m	class:Mode	file:
_wP	source/Mode.h	/^        static int _wP;$/;"	m	class:Mode	access:protected
_width	source/Mode.cpp	/^int                         Mode::_width        = 400;$/;"	m	class:Mode	file:
_width	source/Mode.h	/^        static int _width;$/;"	m	class:Mode	access:protected
_widthPadding	source/Mode.cpp	/^int                         Mode::_widthPadding = 20;$/;"	m	class:Mode	file:
_widthPadding	source/Mode.h	/^        static int _widthPadding;$/;"	m	class:Mode	access:protected
add	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^add r2, r2, c1$/;"	l
addAnimatedRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addAnimatedRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
addAnimatedRigidBody	physLib/src/world/world.h	/^    RigidBody* addAnimatedRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
addAnimatedVertexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addAnimatedVertexData(const Ogre::VertexData *vertex_data,$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const Ogre::VertexData *vertex_data, const Ogre::VertexData *blend_data, const Ogre::Mesh::IndexMap *indexMap)
addAnimatedVertexData	physLib/src/btOgre/BtOgreGP.h	/^	void addAnimatedVertexData(const Ogre::VertexData *vertex_data,$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(const Ogre::VertexData *vertex_data, const Ogre::VertexData *blended_data, const Ogre::Mesh::IndexMap *indexMap)
addEntity	physLib/src/btOgre/BtOgre.cpp	/^	void AnimatedMeshToShapeConverter::addEntity(Entity *entity,const Matrix4 &transform)$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
addEntity	physLib/src/btOgre/BtOgre.cpp	/^	void StaticMeshToShapeConverter::addEntity(Entity *entity,const Matrix4 &transform)$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(Entity *entity,const Matrix4 &transform)
addEntity	physLib/src/btOgre/BtOgreGP.h	/^	void addEntity(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
addEntity	physLib/src/btOgre/BtOgreGP.h	/^	void addEntity(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(Ogre::Entity *entity,const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
addIndexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addIndexData(IndexData *data, const unsigned int offset)$/;"	f	class:BtOgre::VertexIndexToShape	signature:(IndexData *data, const unsigned int offset)
addIndexData	physLib/src/btOgre/BtOgreGP.h	/^	void addIndexData(Ogre::IndexData *data, const unsigned int offset = 0);$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(Ogre::IndexData *data, const unsigned int offset = 0)
addKinematicRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addKinematicRigidBody(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
addKinematicRigidBody	physLib/src/world/world.h	/^    RigidBody* addKinematicRigidBody(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
addMesh	physLib/src/btOgre/BtOgre.cpp	/^	void AnimatedMeshToShapeConverter::addMesh(const MeshPtr &mesh, const Matrix4 &transform)$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(const MeshPtr &mesh, const Matrix4 &transform)
addMesh	physLib/src/btOgre/BtOgre.cpp	/^	void StaticMeshToShapeConverter::addMesh(const MeshPtr &mesh, const Matrix4 &transform)$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:(const MeshPtr &mesh, const Matrix4 &transform)
addMesh	physLib/src/btOgre/BtOgreGP.h	/^	void addMesh(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY);$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform = Ogre::Matrix4::IDENTITY)
addMesh	physLib/src/btOgre/BtOgreGP.h	/^	void addMesh(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform);$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(const Ogre::MeshPtr &mesh, const Ogre::Matrix4 &transform)
addModel	source/Mode.cpp	/^bool Mode::addModel(Gui3D::Combobox* e)$/;"	f	class:Mode	signature:(Gui3D::Combobox* e)
addModel	source/Mode.h	/^        bool addModel(Gui3D::Combobox* e); $/;"	p	class:Mode	access:protected	signature:(Gui3D::Combobox* e)
addPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::addPoint(Real x, Real y, Real z)$/;"	f	class:BtOgre::DynamicLines	signature:(Real x, Real y, Real z)
addPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::addPoint(const Vector3 &p)$/;"	f	class:BtOgre::DynamicLines	signature:(const Vector3 &p)
addPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void addPoint(Real x, Real y, Real z);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(Real x, Real y, Real z)
addPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void addPoint(const Ogre::Vector3 &p);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(const Ogre::Vector3 &p)
addPointToPointConstraint	physLib/src/world/world.cpp	/^btPoint2PointConstraint* World::addPointToPointConstraint(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)$/;"	f	class:World	signature:(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)
addPointToPointConstraint	physLib/src/world/world.h	/^    btPoint2PointConstraint* addPointToPointConstraint(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB);$/;"	p	class:World	access:public	signature:(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB)
addRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType, int group,int mask,btTransform offset)$/;"	f	class:World	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType, int group,int mask,btTransform offset)
addRigidBody	physLib/src/world/world.h	/^    RigidBody* addRigidBody(btScalar mass, Ogre::Entity* entity ,int shapeType, int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER,btTransform offset=btTransform(btTransform::getIdentity()));$/;"	p	class:World	access:public	signature:(btScalar mass, Ogre::Entity* entity ,int shapeType, int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER,btTransform offset=btTransform(btTransform::getIdentity()))
addStaticRigidBody	physLib/src/world/world.cpp	/^RigidBody* World::addStaticRigidBody(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)$/;"	f	class:World	signature:(Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold)
addStaticRigidBody	physLib/src/world/world.h	/^    RigidBody* addStaticRigidBody(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0);$/;"	p	class:World	access:public	signature:(Ogre::Entity* entity ,int shapeType,int group=CollisionLayer::DEFAULT,int mask=CollisionLayer::DEFAULT|CollisionLayer::CHARACTER, btScalar contactProcessingTreshold=0.0)
addStaticVertexData	physLib/src/btOgre/BtOgre.cpp	/^	void VertexIndexToShape::addStaticVertexData(const VertexData *vertex_data)$/;"	f	class:BtOgre::VertexIndexToShape	signature:(const VertexData *vertex_data)
addStaticVertexData	physLib/src/btOgre/BtOgreGP.h	/^	void addStaticVertexData(const Ogre::VertexData *vertex_data);$/;"	p	class:BtOgre::VertexIndexToShape	access:protected	signature:(const Ogre::VertexData *vertex_data)
addThirdPersonController	physLib/src/world/world.cpp	/^ThirdPersonController* World::addThirdPersonController(int resolutionX, int resolutionY,Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold$/;"	f	class:World	signature:(int resolutionX, int resolutionY,Ogre::Entity* entity ,int shapeType,int group,int mask, btScalar contactProcessingTreshold ,Ogre::Vector3 posOffset, Ogre::Quaternion rotOffset)
addThirdPersonController	physLib/src/world/world.h	/^    ThirdPersonController* addThirdPersonController(int resolutionX, int resolutionY, Ogre::Entity* entity ,int shapeType$/;"	p	class:World	access:public	signature:(int resolutionX, int resolutionY, Ogre::Entity* entity ,int shapeType ,int group=CollisionLayer::CHARACTER,int mask=CollisionLayer::DEFAULT, btScalar contactProcessingTreshold=0.0 ,Ogre::Vector3 posOffset=Ogre::Vector3(0.0,0.0,0.0), Ogre::Quaternion rotOffset=Ogre::Quaternion(0.0,0.0,0.0,0.0))
addToComboBox	source/Mode.cpp	/^void Mode::addToComboBox(std::string modelName)$/;"	f	class:Mode	signature:(std::string modelName)
addToComboBox	source/Mode.h	/^        void addToComboBox(std::string modelName);$/;"	p	class:Mode	access:protected	signature:(std::string modelName)
addedCombobox	source/Mode.cpp	/^Gui3D::Combobox*            Mode::addedCombobox =NULL;$/;"	m	class:Mode	file:
addedCombobox	source/Mode.h	/^        static Gui3D::Combobox* addedCombobox;$/;"	m	class:Mode	access:protected
addedModels	source/Mode.cpp	/^std::vector<Ogre::String>   Mode::addedModels;$/;"	m	class:Mode	file:
addedModels	source/Mode.h	/^        static std::vector<Ogre::String> addedModels;$/;"	m	class:Mode	access:protected
allignedBox	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
avgFPS	physLib/src/world/worldbase.h	/^    btScalar avgFPS;$/;"	m	class:WorldBase	access:protected
beginsWith	source/FileIO.cpp	/^bool FileIO::beginsWith(std::string value, std::string bValue)$/;"	f	class:FileIO	signature:(std::string value, std::string bValue)
beginsWith	source/FileIO.h	/^        static bool beginsWith(std::string value, std::string bValue);$/;"	p	class:FileIO	access:public	signature:(std::string value, std::string bValue)
body	physLib/src/object/rigidbodystateanimated.h	/^    btRigidBody* body;$/;"	m	class:RigidBodyStateAnimated	access:private
box	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
box	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
broadphase	physLib/src/world/worldbase.h	/^    btBroadphaseInterface* broadphase;$/;"	m	class:WorldBase	access:protected
cAngle	physLib/src/object/thirdpersoncontroller.h	/^    btScalar cAngle;$/;"	m	class:ThirdPersonController	access:private
cPosOffset	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Vector3 cPosOffset;$/;"	m	class:ThirdPersonController	access:private
cPrntNode	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Node* cPrntNode;$/;"	m	class:ThirdPersonController	access:private
cRotOffset	physLib/src/object/thirdpersoncontroller.h	/^    Ogre::Quaternion cRotOffset;$/;"	m	class:ThirdPersonController	access:private
camCollideLayer	physLib/src/object/thirdpersoncontroller.h	/^    int camCollideLayer;$/;"	m	class:ThirdPersonController	access:private
capsule	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
capsule	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
captionCombobox	source/Mode.cpp	/^Gui3D::Caption*             Mode::captionCombobox=NULL;$/;"	m	class:Mode	file:
captionCombobox	source/Mode.h	/^        static Gui3D::Caption* captionCombobox;$/;"	m	class:Mode	access:protected
chooseRenderer	include/OgreWidget.h	/^  virtual Ogre::RenderSystem* chooseRenderer( Ogre::RenderSystemList* );$/;"	p	class:OgreWidget	access:protected	signature:( Ogre::RenderSystemList* )
clear	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::clear()$/;"	f	class:BtOgre::DynamicLines	signature:()
clear	physLib/src/btOgre/BtOgreExtras.h	/^  void clear();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
collisionConfiguration	physLib/src/world/worldbase.h	/^    btDefaultCollisionConfiguration* collisionConfiguration;$/;"	m	class:WorldBase	access:protected
collisionShapes	physLib/src/world/world.h	/^    std::vector<btCollisionShape*> collisionShapes;$/;"	m	class:World	access:private
convex	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
convex	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
createAlignedBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape* AnimatedMeshToShapeConverter::createAlignedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation)
createAlignedBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createAlignedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation)
createBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape* VertexIndexToShape::createBox()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createBox();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createCapsule	physLib/src/btOgre/BtOgre.cpp	/^	btCapsuleShape* VertexIndexToShape::createCapsule() {$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createCapsule	physLib/src/btOgre/BtOgreGP.h	/^	btCapsuleShape* createCapsule();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createConvex	physLib/src/btOgre/BtOgre.cpp	/^	btConvexHullShape* VertexIndexToShape::createConvex()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createConvex	physLib/src/btOgre/BtOgreGP.h	/^	btConvexHullShape* createConvex();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createCylinder	physLib/src/btOgre/BtOgre.cpp	/^	btCylinderShape* VertexIndexToShape::createCylinder()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createCylinder	physLib/src/btOgre/BtOgreGP.h	/^	btCylinderShape* createCylinder();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createModelFileIndex	source/Mode.cpp	/^std::string Mode::createModelFileIndex(Ogre::String modelName)$/;"	f	class:Mode	signature:(Ogre::String modelName)
createModelFileIndex	source/Mode.h	/^        std::string createModelFileIndex(Ogre::String modelName);$/;"	p	class:Mode	access:protected	signature:(Ogre::String modelName)
createOrientedBox	physLib/src/btOgre/BtOgre.cpp	/^	btBoxShape *AnimatedMeshToShapeConverter::createOrientedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation)
createOrientedBox	physLib/src/btOgre/BtOgreGP.h	/^	btBoxShape* createOrientedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation)
createSphere	physLib/src/btOgre/BtOgre.cpp	/^	btSphereShape* VertexIndexToShape::createSphere()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createSphere	physLib/src/btOgre/BtOgreGP.h	/^	btSphereShape* createSphere();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createTrimesh	physLib/src/btOgre/BtOgre.cpp	/^	btBvhTriangleMeshShape* VertexIndexToShape::createTrimesh()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
createTrimesh	physLib/src/btOgre/BtOgreGP.h	/^	btBvhTriangleMeshShape* createTrimesh();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
createVertexDeclaration	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::createVertexDeclaration()$/;"	f	class:BtOgre::DynamicLines	signature:()
createVertexDeclaration	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void createVertexDeclaration() = 0;$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:()
createVertexDeclaration	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void createVertexDeclaration();$/;"	p	class:BtOgre::DynamicLines	access:protected	signature:()
currentMode	source/DemoApp.h	/^    Mode* currentMode;$/;"	m	class:DemoApp	access:private
currentModel	source/Mode.cpp	/^ModelInfo*                  Mode::currentModel  =NULL;$/;"	m	class:Mode	file:
currentModel	source/Mode.h	/^        static ModelInfo * currentModel;$/;"	m	class:Mode	access:protected
cylinder	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
cylinder	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
def	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^def c2, 2, 1, 0, 0$/;"	l
destroyCombobox	source/Mode.cpp	/^void Mode::destroyCombobox()$/;"	f	class:Mode	signature:()
destroyCombobox	source/Mode.h	/^        void destroyCombobox();$/;"	p	class:Mode	access:protected	signature:()
dispatcher	physLib/src/world/worldbase.h	/^    btCollisionDispatcher* dispatcher;$/;"	m	class:WorldBase	access:protected
dp3_sat	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^dp3_sat r4.rgb, r0_bx2, r4         \/\/ N dot L - diffuse calc $/;"	l
dp3_sat	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^dp3_sat r5.rgb, r0_bx2, r5         \/\/ N dot H - spec calc $/;"	l
draw3dText	physLib/src/btOgre/BtOgreExtras.h	/^	void draw3dText(const btVector3& location,const char* textString)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& location,const char* textString)
drawContactPoint	physLib/src/btOgre/BtOgreExtras.h	/^	void drawContactPoint(const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& PointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)
drawLine	physLib/src/btOgre/BtOgreExtras.h	/^	void drawLine(const btVector3& from,const btVector3& to,const btVector3& color)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const btVector3& from,const btVector3& to,const btVector3& color)
enableDebugging	physLib/src/world/world.cpp	/^void World::enableDebugging(Ogre::SceneNode* rootSceneNode)$/;"	f	class:World	signature:(Ogre::SceneNode* rootSceneNode)
enableDebugging	physLib/src/world/world.h	/^    void enableDebugging(Ogre::SceneNode* rootSceneNode);$/;"	p	class:World	access:public	signature:(Ogre::SceneNode* rootSceneNode)
enableDebugging	physLib/src/world/worldbase.cpp	/^void WorldBase::enableDebugging(Ogre::SceneNode* rootSceneNode)$/;"	f	class:WorldBase	signature:(Ogre::SceneNode* rootSceneNode)
enableDebugging	physLib/src/world/worldbase.h	/^    void enableDebugging(Ogre::SceneNode* rootSceneNode);$/;"	p	class:WorldBase	access:public	signature:(Ogre::SceneNode* rootSceneNode)
entity	physLib/src/object/rigidbodystateanimated.h	/^    Ogre::Entity* entity;$/;"	m	class:RigidBodyStateAnimated	access:private
entity	source/FileIO.h	/^    Ogre::Entity* entity;$/;"	m	struct:ModelInfo	access:public
fillHardwareBuffers	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::fillHardwareBuffers()$/;"	f	class:BtOgre::DynamicLines	signature:()
fillHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void fillHardwareBuffers() = 0;$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:()
fillHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  virtual void fillHardwareBuffers();$/;"	p	class:BtOgre::DynamicLines	access:protected	signature:()
getBoneVertices	physLib/src/btOgre/BtOgre.cpp	/^	bool AnimatedMeshToShapeConverter::getBoneVertices(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, unsigned int &vertex_count, Ogre::Vector3* &vertices, const Vector3 &bonePosition)
getBoneVertices	physLib/src/btOgre/BtOgreGP.h	/^	bool getBoneVertices(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:protected	signature:(unsigned char bone, unsigned int &vertex_count, Ogre::Vector3* &vertices, const Ogre::Vector3 &bonePosition)
getBoundingRadius	physLib/src/btOgre/BtOgre.cpp	/^	Real DynamicRenderable::getBoundingRadius(void) const$/;"	f	class:BtOgre::DynamicRenderable	signature:(void) const
getBoundingRadius	physLib/src/btOgre/BtOgreExtras.h	/^  virtual Ogre::Real getBoundingRadius(void) const;$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(void) const
getCameraToViewportRay	source/FirstPersonNoClip.cpp	/^Ogre::Ray FirstPersonNoClip::getCameraToViewportRay(Ogre::Real screenx, Ogre::Real screeny)$/;"	f	class:FirstPersonNoClip	signature:(Ogre::Real screenx, Ogre::Real screeny)
getCameraToViewportRay	source/FirstPersonNoClip.h	/^        Ogre::Ray getCameraToViewportRay(Ogre::Real screenx, Ogre::Real screeny);$/;"	p	class:FirstPersonNoClip	access:public	signature:(Ogre::Real screenx, Ogre::Real screeny)
getDebugMode	physLib/src/btOgre/BtOgreExtras.h	/^	int	getDebugMode() const$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:() const
getIndexCount	physLib/src/btOgre/BtOgre.cpp	/^	unsigned int VertexIndexToShape::getIndexCount()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getIndexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int getIndexCount();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getIndices	physLib/src/btOgre/BtOgre.cpp	/^	const unsigned int* VertexIndexToShape::getIndices()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getIndices	physLib/src/btOgre/BtOgreGP.h	/^	const unsigned int* getIndices();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getNumPoints	physLib/src/btOgre/BtOgre.cpp	/^	unsigned short DynamicLines::getNumPoints(void) const$/;"	f	class:BtOgre::DynamicLines	signature:(void) const
getNumPoints	physLib/src/btOgre/BtOgreExtras.h	/^  unsigned short getNumPoints(void) const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(void) const
getOperationType	physLib/src/btOgre/BtOgre.cpp	/^	RenderOperation::OperationType DynamicLines::getOperationType() const$/;"	f	class:BtOgre::DynamicLines	signature:() const
getOperationType	physLib/src/btOgre/BtOgreExtras.h	/^  OperationType getOperationType() const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:() const
getOrientation	source/FirstPersonNoClip.cpp	/^const Ogre::Quaternion& FirstPersonNoClip::getOrientation()$/;"	f	class:FirstPersonNoClip	signature:()
getOrientation	source/FirstPersonNoClip.h	/^        const Ogre::Quaternion& getOrientation();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
getOrientedBox	physLib/src/btOgre/BtOgre.cpp	/^	bool AnimatedMeshToShapeConverter::getOrientedBox(unsigned char bone,$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:(unsigned char bone, const Vector3 &bonePosition, const Quaternion &boneOrientation, Vector3 &box_afExtent, Vector3 *box_akAxis, Vector3 &box_kCenter)
getOrientedBox	physLib/src/btOgre/BtOgreGP.h	/^	bool getOrientedBox(unsigned char bone,$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:protected	signature:(unsigned char bone, const Ogre::Vector3 &bonePosition, const Ogre::Quaternion &boneOrientation, Ogre::Vector3 &extents, Ogre::Vector3 *axis, Ogre::Vector3 &center)
getPoint	physLib/src/btOgre/BtOgre.cpp	/^	const Vector3& DynamicLines::getPoint(unsigned short index) const$/;"	f	class:BtOgre::DynamicLines	signature:(unsigned short index) const
getPoint	physLib/src/btOgre/BtOgreExtras.h	/^  const Vector3& getPoint(unsigned short index) const;$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(unsigned short index) const
getPosition	source/FirstPersonNoClip.cpp	/^const Ogre::Vector3&    FirstPersonNoClip::getPosition()$/;"	f	class:FirstPersonNoClip	signature:()
getPosition	source/FirstPersonNoClip.h	/^        const Ogre::Vector3&    getPosition();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
getRadius	physLib/src/btOgre/BtOgre.cpp	/^	Real VertexIndexToShape::getRadius()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getRadius	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Real getRadius();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getScreenCenterMouseDistance	source/MenuMode.cpp	/^Ogre::Vector2 MenuMode::getScreenCenterMouseDistance()$/;"	f	class:MenuMode	signature:()
getScreenCenterMouseDistance	source/MenuMode.h	/^        Ogre::Vector2 getScreenCenterMouseDistance();$/;"	p	class:MenuMode	access:private	signature:()
getSize	physLib/src/btOgre/BtOgre.cpp	/^	Vector3 VertexIndexToShape::getSize()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getSize	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3 getSize();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getSquaredViewDepth	physLib/src/btOgre/BtOgre.cpp	/^	Real DynamicRenderable::getSquaredViewDepth(const Camera* cam) const$/;"	f	class:BtOgre::DynamicRenderable	signature:(const Camera* cam) const
getSquaredViewDepth	physLib/src/btOgre/BtOgreExtras.h	/^  virtual Ogre::Real getSquaredViewDepth(const Ogre::Camera* cam) const;$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(const Ogre::Camera* cam) const
getVertexCount	physLib/src/btOgre/BtOgre.cpp	/^	unsigned int VertexIndexToShape::getVertexCount()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getVertexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int getVertexCount();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getVertices	physLib/src/btOgre/BtOgre.cpp	/^	const Ogre::Vector3* VertexIndexToShape::getVertices()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
getVertices	physLib/src/btOgre/BtOgreGP.h	/^	const Ogre::Vector3* getVertices();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
getWorld	physLib/src/world/world.cpp	/^btDiscreteDynamicsWorld* World::getWorld()$/;"	f	class:World	signature:()
getWorld	physLib/src/world/world.h	/^    btDiscreteDynamicsWorld* getWorld();$/;"	p	class:World	access:public	signature:()
getWorld	physLib/src/world/worldbase.cpp	/^btDiscreteDynamicsWorld* WorldBase::getWorld()$/;"	f	class:WorldBase	signature:()
getWorld	physLib/src/world/worldbase.h	/^    btDiscreteDynamicsWorld* getWorld();$/;"	p	class:WorldBase	access:public	signature:()
getWorldTransform	physLib/src/btOgre/BtOgrePG.h	/^        virtual void getWorldTransform(btTransform &ret) const$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(btTransform &ret) const
getWorldTransform	physLib/src/object/rigidbodystateanimated.h	/^    virtual void getWorldTransform(btTransform &ret) const$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(btTransform &ret) const
groupNames	source/OgreFramework.h	/^    std::vector<Ogre::String> groupNames;$/;"	m	class:OgreFramework	access:public
hasEnding	source/Mode.cpp	/^bool Mode::hasEnding(std::string const &fullString, std::string const &ending)$/;"	f	class:Mode	signature:(std::string const &fullString, std::string const &ending)
hasEnding	source/Mode.h	/^        bool hasEnding(std::string const &fullString, std::string const &ending); $/;"	p	class:Mode	access:protected	signature:(std::string const &fullString, std::string const &ending)
init	include/OgreWidget.h	/^  void init( std::string, std::string, std::string );$/;"	p	class:OgreWidget	access:protected	signature:( std::string, std::string, std::string )
init	physLib/src/world/worldbase.h	/^    virtual void init(btVector3 & gravity)=0;$/;"	p	class:WorldBase	access:public	signature:(btVector3 & gravity)
init	physLib/src/world/worldsinglethread.cpp	/^void worldsinglethread::init(btVector3 & gravity)$/;"	f	class:worldsinglethread	signature:(btVector3 & gravity)
init	physLib/src/world/worldsinglethread.h	/^    void init(btVector3 & gravity);$/;"	p	class:worldsinglethread	access:public	signature:(btVector3 & gravity)
init	source/InsertMode.cpp	/^void InsertMode::init()$/;"	f	class:InsertMode	signature:()
init	source/InsertMode.h	/^        virtual void init();$/;"	p	class:InsertMode	access:public	signature:()
init	source/MenuMode.cpp	/^void MenuMode::init()$/;"	f	class:MenuMode	signature:()
init	source/MenuMode.h	/^        virtual void init();$/;"	p	class:MenuMode	access:public	signature:()
init	source/Mode.h	/^        virtual void init()=0;$/;"	p	class:Mode	access:public	signature:()
initNormal	physLib/src/world/world.cpp	/^void World::initNormal(btScalar averageFPS,btScalar lowestFPS,btVector3& gravity)$/;"	f	class:World	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3& gravity)
initNormal	physLib/src/world/world.h	/^    void initNormal(btScalar averageFPS,btScalar lowestFPS,btVector3 &gravity);$/;"	p	class:World	access:private	signature:(btScalar averageFPS,btScalar lowestFPS,btVector3 &gravity)
initOgre	source/OgreFramework.cpp	/^bool OgreFramework::initOgre(Ogre::String wndTitle, OIS::KeyListener *pKeyListener, OIS::MouseListener *pMouseListener)$/;"	f	class:OgreFramework	signature:(Ogre::String wndTitle, OIS::KeyListener *pKeyListener, OIS::MouseListener *pMouseListener)
initOgre	source/OgreFramework.h	/^	bool initOgre(Ogre::String wndTitle, OIS::KeyListener *pKeyListener = 0, OIS::MouseListener *pMouseListener = 0);$/;"	p	class:OgreFramework	access:public	signature:(Ogre::String wndTitle, OIS::KeyListener *pKeyListener = 0, OIS::MouseListener *pMouseListener = 0)
initialize	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicRenderable::initialize(RenderOperation::OperationType operationType,$/;"	f	class:BtOgre::DynamicRenderable	signature:(RenderOperation::OperationType operationType, bool useIndices)
initialize	physLib/src/btOgre/BtOgreExtras.h	/^  void initialize(Ogre::RenderOperation::OperationType operationType,$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:(Ogre::RenderOperation::OperationType operationType, bool useIndices)
initializeGL	include/OgreWidget.h	/^  virtual void initializeGL();$/;"	p	class:OgreWidget	access:protected	signature:()
insertMode	source/DemoApp.h	/^    Mode* insertMode;$/;"	m	class:DemoApp	access:private
isOgreToBeShutDown	source/OgreFramework.h	/^	bool isOgreToBeShutDown()const{return m_bShutDownOgre;}$/;"	f	class:OgreFramework	access:public	signature:() const
keyPressed	source/DemoApp.cpp	/^bool DemoApp::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:DemoApp	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/DemoApp.h	/^	bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:DemoApp	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/InsertMode.cpp	/^bool InsertMode::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:InsertMode	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/InsertMode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:InsertMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/MenuMode.cpp	/^bool MenuMode::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:MenuMode	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/MenuMode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:MenuMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/Mode.h	/^        virtual bool keyPressed(const OIS::KeyEvent &keyEventRef)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/OgreFramework.cpp	/^bool OgreFramework::keyPressed(const OIS::KeyEvent &keyEventRef)$/;"	f	class:OgreFramework	signature:(const OIS::KeyEvent &keyEventRef)
keyPressed	source/OgreFramework.h	/^	bool keyPressed(const OIS::KeyEvent &keyEventRef);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/DemoApp.cpp	/^bool DemoApp::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:DemoApp	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/DemoApp.h	/^	bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:DemoApp	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/InsertMode.cpp	/^bool InsertMode::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:InsertMode	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/InsertMode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:InsertMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/MenuMode.cpp	/^bool MenuMode::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:MenuMode	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/MenuMode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:MenuMode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/Mode.h	/^        virtual bool keyReleased(const OIS::KeyEvent &keyEventRef)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/OgreFramework.cpp	/^bool OgreFramework::keyReleased(const OIS::KeyEvent &keyEventRef)$/;"	f	class:OgreFramework	signature:(const OIS::KeyEvent &keyEventRef)
keyReleased	source/OgreFramework.h	/^	bool keyReleased(const OIS::KeyEvent &keyEventRef);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::KeyEvent &keyEventRef)
loadResources	include/OgreWidget.h	/^  void loadResources(void);$/;"	p	class:OgreWidget	access:protected	signature:(void)
lrp	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^lrp r0, v0.x, r1, r2$/;"	l
mBoneIndex	physLib/src/btOgre/BtOgreGP.h	/^	BoneIndex           *mBoneIndex;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mBoundRadius	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Real		    mBoundRadius;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mBounds	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3		mBounds;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mCam	source/FirstPersonNoClip.h	/^        Ogre::Camera* mCam;$/;"	m	class:FirstPersonNoClip	access:private
mCamera	include/OgreWidget.h	/^  Ogre::Camera *mCamera;$/;"	m	class:OgreWidget	access:protected
mCameraMan	source/FirstPersonNoClip.h	/^        OgreBites::SdkCameraMan* mCameraMan;$/;"	m	class:FirstPersonNoClip	access:private
mCenterOfMassOffset	physLib/src/btOgre/BtOgrePG.h	/^        btTransform mCenterOfMassOffset;$/;"	m	class:BtOgre::RigidBodyState	access:protected
mDebugDrawer	physLib/src/world/worldbase.h	/^    BtOgre::DebugDrawer* mDebugDrawer;$/;"	m	class:WorldBase	access:protected
mDebugOn	physLib/src/btOgre/BtOgreExtras.h	/^	bool mDebugOn;$/;"	m	class:BtOgre::DebugDrawer	access:protected
mDirty	physLib/src/btOgre/BtOgreExtras.h	/^  bool mDirty;$/;"	m	class:BtOgre::DynamicLines	access:private
mEntity	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Entity*		mEntity;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
mEntity	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Entity*		mEntity;$/;"	m	class:BtOgre::StaticMeshToShapeConverter	access:protected
mFPC	source/OgreFramework.h	/^    FirstPersonNoClip*          mFPC;$/;"	m	class:OgreFramework	access:public
mGui3D	source/MenuMode.h	/^        Gui3D::Gui3D* mGui3D;$/;"	m	class:MenuMode	access:private
mIndexBuffer	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int*       mIndexBuffer;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mIndexBufferCapacity	physLib/src/btOgre/BtOgreExtras.h	/^  size_t mIndexBufferCapacity;$/;"	m	class:BtOgre::DynamicRenderable	access:protected
mIndexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int        mIndexCount;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mLineDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	DynamicLines *mLineDrawer;$/;"	m	class:BtOgre::DebugDrawer	access:protected
mMousePointer	source/MenuMode.h	/^        Gorilla::Rectangle* mMousePointer;$/;"	m	class:MenuMode	access:private
mMousePointerLayer	source/MenuMode.h	/^        Gorilla::Layer* mMousePointerLayer;$/;"	m	class:MenuMode	access:private
mMyPurplePanelColors	source/MenuMode.h	/^        MyPurplePanelColors mMyPurplePanelColors;$/;"	m	class:MenuMode	access:private
mNode	physLib/src/btOgre/BtOgreExtras.h	/^	Ogre::SceneNode *mNode;$/;"	m	class:BtOgre::DebugDrawer	access:protected
mNode	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::SceneNode*	mNode;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
mNode	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::SceneNode*	mNode;$/;"	m	class:BtOgre::StaticMeshToShapeConverter	access:protected
mNode	physLib/src/btOgre/BtOgrePG.h	/^        Ogre::SceneNode *mNode;$/;"	m	class:BtOgre::RigidBodyState	access:protected
mNormalizedMousePosition	source/MenuMode.h	/^        Ogre::Vector2 mNormalizedMousePosition;$/;"	m	class:MenuMode	access:private
mOgreRoot	include/OgreWidget.h	/^  Ogre::Root *mOgreRoot;$/;"	m	class:OgreWidget	access:protected
mOgreWindow	include/OgreWidget.h	/^  Ogre::RenderWindow *mOgreWindow;$/;"	m	class:OgreWidget	access:protected
mPoints	physLib/src/btOgre/BtOgreExtras.h	/^  std::vector<Vector3> mPoints;$/;"	m	class:BtOgre::DynamicLines	access:private
mResourcesCfg	include/OgreWidget.h	/^  Ogre::String mResourcesCfg;$/;"	m	class:OgreWidget	access:protected
mScale	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3		mScale;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mSceneMgr	include/OgreWidget.h	/^  Ogre::SceneManager *mSceneMgr;$/;"	m	class:OgreWidget	access:protected
mTransform	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Matrix4		mTransform;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mTransform	physLib/src/btOgre/BtOgrePG.h	/^        btTransform mTransform;$/;"	m	class:BtOgre::RigidBodyState	access:protected
mTransformedVerticesTemp	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3       *mTransformedVerticesTemp;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
mTransformedVerticesTempSize	physLib/src/btOgre/BtOgreGP.h	/^	size_t               mTransformedVerticesTempSize;$/;"	m	class:BtOgre::AnimatedMeshToShapeConverter	access:protected
mVertexBuffer	physLib/src/btOgre/BtOgreGP.h	/^	Ogre::Vector3*	    mVertexBuffer;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mVertexBufferCapacity	physLib/src/btOgre/BtOgreExtras.h	/^  size_t mVertexBufferCapacity;$/;"	m	class:BtOgre::DynamicRenderable	access:protected
mVertexCount	physLib/src/btOgre/BtOgreGP.h	/^	unsigned int        mVertexCount;$/;"	m	class:BtOgre::VertexIndexToShape	access:protected
mViewport	include/OgreWidget.h	/^  Ogre::Viewport *mViewport;$/;"	m	class:OgreWidget	access:protected
mWorld	physLib/src/btOgre/BtOgreExtras.h	/^	btDynamicsWorld *mWorld;$/;"	m	class:BtOgre::DebugDrawer	access:protected
mWorld	physLib/src/object/object.cpp	/^btDiscreteDynamicsWorld* Object::mWorld=NULL;$/;"	m	class:Object	file:
mWorld	physLib/src/object/object.h	/^    static btDiscreteDynamicsWorld* mWorld;$/;"	m	class:Object	access:protected
mWorld	physLib/src/object/thirdpersoncontroller.h	/^    btDiscreteDynamicsWorld* mWorld;$/;"	m	class:ThirdPersonController	access:private
mWorld	physLib/src/world/world.h	/^    WorldBase * mWorld;$/;"	m	class:World	access:private
m_FrameEvent	source/OgreFramework.h	/^    Ogre::FrameEvent                        m_FrameEvent;$/;"	m	class:OgreFramework	access:public
m_MoveScale	source/OgreFramework.h	/^	float					m_MoveScale; $/;"	m	class:OgreFramework	access:private
m_MoveSpeed	source/OgreFramework.h	/^	Ogre::Real				m_MoveSpeed; $/;"	m	class:OgreFramework	access:private
m_RotScale	source/OgreFramework.h	/^	Ogre::Degree				m_RotScale;$/;"	m	class:OgreFramework	access:private
m_RotateSpeed	source/OgreFramework.h	/^	Ogre::Degree				m_RotateSpeed; $/;"	m	class:OgreFramework	access:private
m_bShutDownOgre	source/OgreFramework.h	/^	bool					m_bShutDownOgre;$/;"	m	class:OgreFramework	access:private
m_bShutdown	source/DemoApp.h	/^	bool m_bShutdown;$/;"	m	class:DemoApp	access:private
m_character	physLib/src/object/thirdpersoncontroller.h	/^    btKinematicCharacterController* m_character;$/;"	m	class:ThirdPersonController	access:private
m_ghostObject	physLib/src/object/thirdpersoncontroller.h	/^    btPairCachingGhostObject* m_ghostObject;$/;"	m	class:ThirdPersonController	access:private
m_iNumScreenShots	source/OgreFramework.h	/^	int					m_iNumScreenShots;$/;"	m	class:OgreFramework	access:private
m_pCamQuat	source/OgreFramework.h	/^    Ogre::Quaternion            m_pCamQuat;$/;"	m	class:OgreFramework	access:private
m_pCamera	source/OgreFramework.h	/^	Ogre::Camera*				m_pCamera;$/;"	m	class:OgreFramework	access:private
m_pInputMgr	source/OgreFramework.h	/^	OIS::InputManager*			m_pInputMgr;$/;"	m	class:OgreFramework	access:public
m_pKeyboard	source/OgreFramework.h	/^	OIS::Keyboard*				m_pKeyboard;$/;"	m	class:OgreFramework	access:public
m_pLog	source/OgreFramework.h	/^	Ogre::Log*				m_pLog;$/;"	m	class:OgreFramework	access:public
m_pMouse	source/OgreFramework.h	/^	OIS::Mouse*				m_pMouse;$/;"	m	class:OgreFramework	access:public
m_pRenderWnd	source/OgreFramework.h	/^	Ogre::RenderWindow*			m_pRenderWnd;$/;"	m	class:OgreFramework	access:public
m_pRoot	source/OgreFramework.h	/^	Ogre::Root*				m_pRoot;$/;"	m	class:OgreFramework	access:public
m_pSceneMgr	source/OgreFramework.h	/^	Ogre::SceneManager*			m_pSceneMgr;$/;"	m	class:OgreFramework	access:public
m_pTimer	source/OgreFramework.h	/^	Ogre::Timer*				m_pTimer;$/;"	m	class:OgreFramework	access:public
m_pTrayMgr	source/OgreFramework.h	/^	OgreBites::SdkTrayManager*	        m_pTrayMgr;$/;"	m	class:OgreFramework	access:private
m_pViewport	source/OgreFramework.h	/^	Ogre::Viewport*				m_pViewport;$/;"	m	class:OgreFramework	access:public
mad	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^mad r0.xyz, r0_bx2, c0.x, r1$/;"	l
mad	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mad r0.rgb, r0, c0, r5         \/\/ colour = diffusetex * (N dot L)* diffuselight + specular $/;"	l
mad	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mad r0.xyz, r0.a, c2.x, c2.y   \/\/ displacement = height * scale + bias $/;"	l
mad	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mad r2.xyz, r3, r0, r2         \/\/ newtexcoord = eyedir * displacement + uv $/;"	l
makeBody	physLib/src/object/softbody.h	/^    void makeBody(btScalar mass);$/;"	p	class:softbody	access:public	signature:(btScalar mass)
makeCombobox	source/Mode.cpp	/^void Mode::makeCombobox(std::string& totalName)$/;"	f	class:Mode	signature:(std::string& totalName)
makeCombobox	source/Mode.h	/^        void makeCombobox(std::string& totalName);$/;"	p	class:Mode	access:protected	signature:(std::string& totalName)
maxSubSteps	physLib/src/world/worldbase.h	/^    int maxSubSteps;$/;"	m	class:WorldBase	access:protected
menuMode	source/DemoApp.h	/^    Mode* menuMode;$/;"	m	class:DemoApp	access:private
modelContainer	source/Mode.cpp	/^std::vector<ModelInfo>Mode::modelContainer;$/;"	m	class:Mode	file:
modelContainer	source/Mode.h	/^        static std::vector<ModelInfo> modelContainer;$/;"	m	class:Mode	access:protected
modelDistance	source/Mode.cpp	/^float                       Mode::modelDistance =4.0f;$/;"	m	class:Mode	file:
modelDistance	source/Mode.h	/^        static float modelDistance;$/;"	m	class:Mode	access:protected
modelsPlaced	source/Mode.cpp	/^unsigned int                Mode::modelsPlaced  =0;$/;"	m	class:Mode	file:
modelsPlaced	source/Mode.h	/^        static unsigned int modelsPlaced;$/;"	m	class:Mode	access:protected
mouseMoved	source/DemoApp.cpp	/^bool DemoApp::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/DemoApp.h	/^	bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/FirstPersonNoClip.cpp	/^bool FirstPersonNoClip::mouseMoved(const OIS::MouseEvent& evt)$/;"	f	class:FirstPersonNoClip	signature:(const OIS::MouseEvent& evt)
mouseMoved	source/FirstPersonNoClip.h	/^        bool mouseMoved(const OIS::MouseEvent& evt);$/;"	p	class:FirstPersonNoClip	access:public	signature:(const OIS::MouseEvent& evt)
mouseMoved	source/InsertMode.cpp	/^bool InsertMode::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/InsertMode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/MenuMode.cpp	/^bool MenuMode::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/MenuMode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/Mode.h	/^        virtual bool mouseMoved(const OIS::MouseEvent &evt)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/OgreFramework.cpp	/^bool OgreFramework::mouseMoved(const OIS::MouseEvent &evt)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt)
mouseMoved	source/OgreFramework.h	/^	bool mouseMoved(const OIS::MouseEvent &evt);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt)
mousePressed	source/DemoApp.cpp	/^bool DemoApp::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/DemoApp.h	/^	bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id); $/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/InsertMode.cpp	/^bool InsertMode::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/InsertMode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/MenuMode.cpp	/^bool MenuMode::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id) $/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/MenuMode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/Mode.h	/^        virtual bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/OgreFramework.cpp	/^bool OgreFramework::mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mousePressed	source/OgreFramework.h	/^	bool mousePressed(const OIS::MouseEvent &evt, OIS::MouseButtonID id); $/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/DemoApp.cpp	/^bool DemoApp::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:DemoApp	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/DemoApp.h	/^	bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:DemoApp	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/InsertMode.cpp	/^bool InsertMode::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/InsertMode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:InsertMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/MenuMode.cpp	/^bool MenuMode::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:MenuMode	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/MenuMode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:MenuMode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/Mode.h	/^        virtual bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)=0;$/;"	p	class:Mode	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/OgreFramework.cpp	/^bool OgreFramework::mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id)$/;"	f	class:OgreFramework	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mouseReleased	source/OgreFramework.h	/^	bool mouseReleased(const OIS::MouseEvent &evt, OIS::MouseButtonID id);$/;"	p	class:OgreFramework	access:public	signature:(const OIS::MouseEvent &evt, OIS::MouseButtonID id)
mov	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^mov r1.z, c2.y$/;"	l
moveModel	source/Mode.cpp	/^void Mode::moveModel()$/;"	f	class:Mode	signature:()
moveModel	source/Mode.h	/^        void moveModel();$/;"	p	class:Mode	access:protected	signature:()
mtnState	physLib/src/object/rigidbody.h	/^    btMotionState* mtnState;$/;"	m	class:RigidBody	access:private
mul	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mul r0.rgb, r4, r1            \/\/ colour = diffusetex * N dot L $/;"	l
mul	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mul r5.rgb, r5, c1            \/\/ specular = (N dot H)^32 * specularlight $/;"	l
mul	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mul r5.rgb, r5, r5          $/;"	l
mul	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^mul r5.rgb, r5.a, r5.a          $/;"	l
name	source/FileIO.h	/^    Ogre::String name;$/;"	m	struct:ModelInfo	access:public
nodeToBullet	physLib/src/world/world.cpp	/^btTransform World::nodeToBullet(Ogre::SceneNode* node)$/;"	f	class:World	signature:(Ogre::SceneNode* node)
nodeToBullet	physLib/src/world/world.h	/^    btTransform nodeToBullet(Ogre::SceneNode* node);$/;"	p	class:World	access:private	signature:(Ogre::SceneNode* node)
none	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
none	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
noneSelected	source/Mode.cpp	/^std::string                 Mode::noneSelected = "Select Model for placing";$/;"	m	class:Mode	file:
noneSelected	source/Mode.h	/^        static std::string noneSelected; $/;"	m	class:Mode	access:protected
once	source/InsertMode.cpp	/^bool once = true;$/;"	v
operator =	source/OgreFramework.h	/^	OgreFramework& operator= (const OgreFramework&);$/;"	p	class:OgreFramework	access:private	signature:(const OgreFramework&)
orientedBox	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
paintGL	include/OgreWidget.h	/^  virtual void paintGL();$/;"	p	class:OgreWidget	access:protected	signature:()
panel	source/Mode.cpp	/^Gui3D::Panel*               Mode::panel         =NULL;$/;"	m	class:Mode	file:
panel	source/Mode.h	/^        static Gui3D::Panel* panel;$/;"	m	class:Mode	access:protected
phase	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^phase$/;"	l
phase	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^phase $/;"	l
prepareHardwareBuffers	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicRenderable::prepareHardwareBuffers(size_t vertexCount,$/;"	f	class:BtOgre::DynamicRenderable	signature:(size_t vertexCount, size_t indexCount)
prepareHardwareBuffers	physLib/src/btOgre/BtOgreExtras.h	/^  void prepareHardwareBuffers(size_t vertexCount, size_t indexCount);$/;"	p	class:BtOgre::DynamicRenderable	access:protected	signature:(size_t vertexCount, size_t indexCount)
rEngine	source/DemoApp.h	/^    OgreFramework* rEngine;$/;"	m	class:DemoApp	access:private
rEngine	source/Mode.cpp	/^OgreFramework*              Mode::rEngine       =NULL;$/;"	m	class:Mode	file:
rEngine	source/Mode.h	/^        static OgreFramework* rEngine;$/;"	m	class:Mode	access:protected
rMode	source/InsertMode.h	/^        bool rMode;$/;"	m	class:InsertMode	access:private
readFile	source/FileIO.cpp	/^std::vector<ModelInfo> FileIO::readFile(const char* filename, Ogre::SceneManager * scMgr)$/;"	f	class:FileIO	signature:(const char* filename, Ogre::SceneManager * scMgr)
readFile	source/FileIO.h	/^        static std::vector<ModelInfo> readFile(const char* filename, Ogre::SceneManager * scMgr);$/;"	p	class:FileIO	access:public	signature:(const char* filename, Ogre::SceneManager * scMgr)
reportErrorWarning	physLib/src/btOgre/BtOgreExtras.h	/^	void reportErrorWarning(const char* warningString)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(const char* warningString)
resX	physLib/src/object/thirdpersoncontroller.h	/^    int resX;$/;"	m	class:ThirdPersonController	access:private
resY	physLib/src/object/thirdpersoncontroller.h	/^    int resY;$/;"	m	class:ThirdPersonController	access:private
resizeGL	include/OgreWidget.h	/^  virtual void resizeGL( int, int );$/;"	p	class:OgreWidget	access:protected	signature:( int, int )
rigidBody	source/FileIO.h	/^    RigidBody* rigidBody;$/;"	m	struct:ModelInfo	access:public
rotateModel	source/InsertMode.cpp	/^void InsertMode::rotateModel(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
rotateModel	source/InsertMode.h	/^        void rotateModel(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:private	signature:(const OIS::MouseEvent &evt)
rotationNode	source/FileIO.h	/^    Ogre::SceneNode* rotationNode;$/;"	m	struct:ModelInfo	access:public
runDemo	source/DemoApp.cpp	/^void DemoApp::runDemo()$/;"	f	class:DemoApp	signature:()
runDemo	source/DemoApp.h	/^	void runDemo();$/;"	p	class:DemoApp	access:private	signature:()
sMode	source/InsertMode.h	/^        bool sMode;$/;"	m	class:InsertMode	access:private
scaleModel	source/InsertMode.cpp	/^void InsertMode::scaleModel(const OIS::MouseEvent &evt)$/;"	f	class:InsertMode	signature:(const OIS::MouseEvent &evt)
scaleModel	source/InsertMode.h	/^        void scaleModel(const OIS::MouseEvent &evt);$/;"	p	class:InsertMode	access:private	signature:(const OIS::MouseEvent &evt)
scaleNode	source/FileIO.h	/^    Ogre::SceneNode* scaleNode;$/;"	m	struct:ModelInfo	access:public
selectModel	source/Mode.cpp	/^bool Mode::selectModel(Gui3D::Combobox* e)$/;"	f	class:Mode	signature:(Gui3D::Combobox* e)
selectModel	source/Mode.h	/^        bool selectModel(Gui3D::Combobox* e);$/;"	p	class:Mode	access:protected	signature:(Gui3D::Combobox* e)
setCameraCollisionLayer	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setCameraCollisionLayer(int layer)$/;"	f	class:ThirdPersonController	signature:(int layer)
setCameraCollisionLayer	physLib/src/object/thirdpersoncontroller.h	/^    void setCameraCollisionLayer(int layer);$/;"	p	class:ThirdPersonController	access:public	signature:(int layer)
setCaptionText	source/Mode.cpp	/^void Mode::setCaptionText(std::string modelName)$/;"	f	class:Mode	signature:(std::string modelName)
setCaptionText	source/Mode.h	/^        void setCaptionText(std::string modelName);$/;"	p	class:Mode	access:protected	signature:(std::string modelName)
setCenterOfMassOffset	physLib/src/btOgre/BtOgrePG.h	/^        void setCenterOfMassOffset(btTransform &offset)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(btTransform &offset)
setDebugMode	physLib/src/btOgre/BtOgreExtras.h	/^	void setDebugMode(int isOn)$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:(int isOn)
setEntity	physLib/src/object/rigidbodystateanimated.h	/^    void setEntity(Ogre::Entity* entityInThis)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(Ogre::Entity* entityInThis)
setNode	physLib/src/btOgre/BtOgrePG.h	/^        void setNode(Ogre::SceneNode *node)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(Ogre::SceneNode *node)
setOffsetPosition	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setOffsetPosition(const Ogre::Vector3& offset)$/;"	f	class:ThirdPersonController	signature:(const Ogre::Vector3& offset)
setOffsetPosition	physLib/src/object/thirdpersoncontroller.h	/^    void setOffsetPosition(const Ogre::Vector3& offset);$/;"	p	class:ThirdPersonController	access:public	signature:(const Ogre::Vector3& offset)
setOffsetRotation	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::setOffsetRotation(const Ogre::Quaternion& offset)$/;"	f	class:ThirdPersonController	signature:(const Ogre::Quaternion& offset)
setOffsetRotation	physLib/src/object/thirdpersoncontroller.h	/^    void setOffsetRotation(const Ogre::Quaternion& offset);$/;"	p	class:ThirdPersonController	access:public	signature:(const Ogre::Quaternion& offset)
setOperationType	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::setOperationType(OperationType opType)$/;"	f	class:BtOgre::DynamicLines	signature:(OperationType opType)
setOperationType	physLib/src/btOgre/BtOgreExtras.h	/^  void setOperationType(OperationType opType);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(OperationType opType)
setPoint	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::setPoint(unsigned short index, const Vector3 &value)$/;"	f	class:BtOgre::DynamicLines	signature:(unsigned short index, const Vector3 &value)
setPoint	physLib/src/btOgre/BtOgreExtras.h	/^  void setPoint(unsigned short index, const Vector3 &value);$/;"	p	class:BtOgre::DynamicLines	access:public	signature:(unsigned short index, const Vector3 &value)
setRigidBody	physLib/src/object/rigidbodystateanimated.h	/^    void setRigidBody(btRigidBody* bodyInThis,int wtShape)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(btRigidBody* bodyInThis,int wtShape)
setWorld	physLib/src/object/object.cpp	/^void Object::setWorld(btDiscreteDynamicsWorld* world)$/;"	f	class:Object	signature:(btDiscreteDynamicsWorld* world)
setWorld	physLib/src/object/object.h	/^    static void setWorld(btDiscreteDynamicsWorld* world);$/;"	p	class:Object	access:public	signature:(btDiscreteDynamicsWorld* world)
setWorld	source/Mode.cpp	/^void Mode::setWorld(World* _world)$/;"	f	class:Mode	signature:(World* _world)
setWorld	source/Mode.h	/^        void setWorld(World* _world);$/;"	p	class:Mode	access:public	signature:(World* _world)
setWorldTransform	physLib/src/btOgre/BtOgrePG.h	/^        virtual void setWorldTransform(const btTransform &in)$/;"	f	class:BtOgre::RigidBodyState	access:public	signature:(const btTransform &in)
setWorldTransform	physLib/src/object/rigidbodystateanimated.h	/^    virtual void setWorldTransform(const btTransform &in)$/;"	f	class:RigidBodyStateAnimated	access:public	signature:(const btTransform &in)
setupDemoScene	source/DemoApp.cpp	/^void DemoApp::setupDemoScene()$/;"	f	class:DemoApp	signature:()
setupDemoScene	source/DemoApp.h	/^    void setupDemoScene();$/;"	p	class:DemoApp	access:private	signature:()
setupResources	include/OgreWidget.h	/^  void setupResources(void);$/;"	p	class:OgreWidget	access:protected	signature:(void)
setupShape	physLib/src/object/Shape.h	/^    inline btConvexShape* setupShape(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)$/;"	f	namespace:ConvexShapez	signature:(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)
setupShape	physLib/src/object/Shape.h	/^   inline btCollisionShape* setupShape(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)$/;"	f	namespace:Shapez	signature:(int shapeType, BtOgre::StaticMeshToShapeConverter& converter)
setupShapeAnimated	physLib/src/object/Shape.h	/^   inline btCollisionShape* setupShapeAnimated(int shapeType, BtOgre::AnimatedMeshToShapeConverter& converter)$/;"	f	namespace:Shapez	signature:(int shapeType, BtOgre::AnimatedMeshToShapeConverter& converter)
softbody	physLib/src/object/softbody.cpp	/^softbody::softbody()$/;"	f	class:softbody	signature:()
softbody	physLib/src/object/softbody.h	/^    softbody();$/;"	p	class:softbody	access:public	signature:()
softbody	physLib/src/object/softbody.h	/^class softbody:public Object$/;"	c	inherits:Object
softbody::makeBody	physLib/src/object/softbody.h	/^    void makeBody(btScalar mass);$/;"	p	class:softbody	access:public	signature:(btScalar mass)
softbody::softbody	physLib/src/object/softbody.cpp	/^softbody::softbody()$/;"	f	class:softbody	signature:()
softbody::softbody	physLib/src/object/softbody.h	/^    softbody();$/;"	p	class:softbody	access:public	signature:()
softbody::~softbody	physLib/src/object/softbody.cpp	/^softbody::~softbody()$/;"	f	class:softbody	signature:()
softbody::~softbody	physLib/src/object/softbody.h	/^    ~softbody();$/;"	p	class:softbody	access:public	signature:()
solver	physLib/src/world/worldbase.h	/^    btSequentialImpulseConstraintSolver* solver;$/;"	m	class:WorldBase	access:protected
sphere	physLib/src/object/Shape.h	/^    enum { sphere, box, cylinder, convex, capsule,none };$/;"	e	enum:ConvexShapez::__anon3
sphere	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
startDemo	source/DemoApp.cpp	/^void DemoApp::startDemo()$/;"	f	class:DemoApp	signature:()
startDemo	source/DemoApp.h	/^	void startDemo();$/;"	p	class:DemoApp	access:public	signature:()
step	physLib/src/btOgre/BtOgreExtras.h	/^	void step()$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:()
step	physLib/src/world/world.cpp	/^void World::step(btScalar timeStep)$/;"	f	class:World	signature:(btScalar timeStep)
step	physLib/src/world/world.h	/^    void step(btScalar timeStep);$/;"	p	class:World	access:public	signature:(btScalar timeStep)
step	physLib/src/world/worldbase.cpp	/^void WorldBase::step(btScalar timeStep)$/;"	f	class:WorldBase	signature:(btScalar timeStep)
step	physLib/src/world/worldbase.h	/^    void step(btScalar timeStep);$/;"	p	class:WorldBase	access:public	signature:(btScalar timeStep)
stepDebug	physLib/src/world/world.cpp	/^void World::stepDebug()$/;"	f	class:World	signature:()
stepDebug	physLib/src/world/world.h	/^    void stepDebug();$/;"	p	class:World	access:public	signature:()
stepDebug	physLib/src/world/worldbase.cpp	/^void WorldBase::stepDebug()$/;"	f	class:WorldBase	signature:()
stepDebug	physLib/src/world/worldbase.h	/^    void stepDebug();$/;"	p	class:WorldBase	access:public	signature:()
stringToFloat	source/FileIO.cpp	/^float FileIO::stringToFloat(std::string str)$/;"	f	class:FileIO	signature:(std::string str)
stringToFloat	source/FileIO.h	/^        static float stringToFloat(std::string str);$/;"	p	class:FileIO	access:public	signature:(std::string str)
texcrd	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^texcrd r1.xy, t1_dw.xyw$/;"	l
texcrd	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texcrd r2.xyz, t0            \/\/ get uv coordinates $/;"	l
texcrd	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texcrd r3.xyz, t2            \/\/ get eyedir vector $/;"	l
texcrd	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texcrd r4.xyz, t1            \/\/ get lightdir vector $/;"	l
texcrd	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texcrd r5.xyz, t3            \/\/ get half angle vector $/;"	l
texld	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^texld r0, t0.xyz$/;"	l
texld	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^texld r1, r0.xyz$/;"	l
texld	OgreFiles/media/materials/programs/Example_FresnelPS.asm	/^texld r2, r0.xyz$/;"	l
texld	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texld r0, r2.xyz            \/\/ get normal N using newtexcoord $/;"	l
texld	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texld r0, t0               \/\/ get height $/;"	l
texld	OgreFiles/media/materials/programs/OffsetMapping_specular.asm	/^texld r1, r2.xyz            \/\/ get diffuse texture using newtexcoord $/;"	l
toBullet	physLib/src/btOgre/BtOgreExtras.h	/^	static btQuaternion toBullet(const Ogre::Quaternion &q)$/;"	f	class:BtOgre::Convert	access:public	signature:(const Ogre::Quaternion &q)
toBullet	physLib/src/btOgre/BtOgreExtras.h	/^	static btVector3 toBullet(const Ogre::Vector3 &v)$/;"	f	class:BtOgre::Convert	access:public	signature:(const Ogre::Vector3 &v)
toOgre	physLib/src/btOgre/BtOgreExtras.h	/^	static Ogre::Quaternion toOgre(const btQuaternion &q)$/;"	f	class:BtOgre::Convert	access:public	signature:(const btQuaternion &q)
toOgre	physLib/src/btOgre/BtOgreExtras.h	/^	static Ogre::Vector3 toOgre(const btVector3 &v)$/;"	f	class:BtOgre::Convert	access:public	signature:(const btVector3 &v)
totalCombobox	source/MenuMode.h	/^        Gui3D::Combobox* totalCombobox;$/;"	m	class:MenuMode	access:private
totalModels	source/Mode.cpp	/^std::vector<Ogre::String>   Mode::totalModels;$/;"	m	class:Mode	file:
totalModels	source/Mode.h	/^        static std::vector<Ogre::String> totalModels;$/;"	m	class:Mode	access:protected
translationNode	source/FileIO.h	/^    Ogre::SceneNode* translationNode;$/;"	m	struct:ModelInfo	access:public
trimesh	physLib/src/object/Shape.h	/^    enum { sphere, box, trimesh, cylinder, convex, capsule, allignedBox, orientedBox,none };$/;"	e	enum:Shapez::__anon2
ui	include/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	access:private
update	physLib/src/btOgre/BtOgre.cpp	/^	void DynamicLines::update()$/;"	f	class:BtOgre::DynamicLines	signature:()
update	physLib/src/btOgre/BtOgreExtras.h	/^  void update();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
update	source/FirstPersonNoClip.cpp	/^void FirstPersonNoClip::update(double timeSinceLastFrame, OIS::Keyboard* inputManager)$/;"	f	class:FirstPersonNoClip	signature:(double timeSinceLastFrame, OIS::Keyboard* inputManager)
update	source/FirstPersonNoClip.h	/^        void update(double timeSinceLastFrame, OIS::Keyboard* inputManager);$/;"	p	class:FirstPersonNoClip	access:public	signature:(double timeSinceLastFrame, OIS::Keyboard* inputManager)
update	source/InsertMode.cpp	/^void InsertMode::update(double timeSinceLastFrame)$/;"	f	class:InsertMode	signature:(double timeSinceLastFrame)
update	source/InsertMode.h	/^        virtual void update(double);$/;"	p	class:InsertMode	access:public	signature:(double)
update	source/MenuMode.cpp	/^void MenuMode::update(double timeSinceLastFrame)$/;"	f	class:MenuMode	signature:(double timeSinceLastFrame)
update	source/MenuMode.h	/^        virtual void update(double);$/;"	p	class:MenuMode	access:public	signature:(double)
update	source/Mode.h	/^        virtual void update(double)=0;$/;"	p	class:Mode	access:public	signature:(double)
updateCamera	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::updateCamera(Ogre::Camera* mCamera,int mouseX, int mouseY)$/;"	f	class:ThirdPersonController	signature:(Ogre::Camera* mCamera,int mouseX, int mouseY)
updateCamera	physLib/src/object/thirdpersoncontroller.h	/^    void updateCamera(Ogre::Camera* mCamera,int mouseX, int mouseY);$/;"	p	class:ThirdPersonController	access:public	signature:(Ogre::Camera* mCamera,int mouseX, int mouseY)
updateCharacter	physLib/src/object/thirdpersoncontroller.cpp	/^void ThirdPersonController::updateCharacter(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)$/;"	f	class:ThirdPersonController	signature:(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)
updateCharacter	physLib/src/object/thirdpersoncontroller.h	/^    void updateCharacter(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt);$/;"	p	class:ThirdPersonController	access:public	signature:(bool gLeft, bool gRight, bool gForward, bool gBackward, const btScalar& dt)
updateOgre	source/OgreFramework.cpp	/^void OgreFramework::updateOgre(double timeSinceLastFrame)$/;"	f	class:OgreFramework	signature:(double timeSinceLastFrame)
updateOgre	source/OgreFramework.h	/^	void updateOgre(double timeSinceLastFrame);$/;"	p	class:OgreFramework	access:public	signature:(double timeSinceLastFrame)
whatShape	physLib/src/object/rigidbodystateanimated.h	/^    int whatShape;$/;"	m	class:RigidBodyStateAnimated	access:private
widgetDistance	source/MenuMode.h	/^        float widgetDistance;$/;"	m	class:MenuMode	access:private
world	physLib/src/world/worldbase.h	/^    btDiscreteDynamicsWorld* world;$/;"	m	class:WorldBase	access:protected
world	source/DemoApp.h	/^    World* world;$/;"	m	class:DemoApp	access:private
world	source/Mode.cpp	/^World*                      Mode::world         =NULL;$/;"	m	class:Mode	file:
world	source/Mode.h	/^        static World* world;$/;"	m	class:Mode	access:protected
worldsinglethread	physLib/src/world/worldsinglethread.cpp	/^worldsinglethread::worldsinglethread(btScalar averageFPS,btScalar lowestFPS):WorldBase(averageFPS, lowestFPS)$/;"	f	class:worldsinglethread	signature:(btScalar averageFPS,btScalar lowestFPS)
worldsinglethread	physLib/src/world/worldsinglethread.h	/^    worldsinglethread(btScalar averageFPS,btScalar lowestFPS);$/;"	p	class:worldsinglethread	access:public	signature:(btScalar averageFPS,btScalar lowestFPS)
worldsinglethread	physLib/src/world/worldsinglethread.h	/^class worldsinglethread:public WorldBase$/;"	c	inherits:WorldBase
worldsinglethread::init	physLib/src/world/worldsinglethread.cpp	/^void worldsinglethread::init(btVector3 & gravity)$/;"	f	class:worldsinglethread	signature:(btVector3 & gravity)
worldsinglethread::init	physLib/src/world/worldsinglethread.h	/^    void init(btVector3 & gravity);$/;"	p	class:worldsinglethread	access:public	signature:(btVector3 & gravity)
worldsinglethread::worldsinglethread	physLib/src/world/worldsinglethread.cpp	/^worldsinglethread::worldsinglethread(btScalar averageFPS,btScalar lowestFPS):WorldBase(averageFPS, lowestFPS)$/;"	f	class:worldsinglethread	signature:(btScalar averageFPS,btScalar lowestFPS)
worldsinglethread::worldsinglethread	physLib/src/world/worldsinglethread.h	/^    worldsinglethread(btScalar averageFPS,btScalar lowestFPS);$/;"	p	class:worldsinglethread	access:public	signature:(btScalar averageFPS,btScalar lowestFPS)
worldsinglethread::~worldsinglethread	physLib/src/world/worldsinglethread.cpp	/^worldsinglethread::~worldsinglethread()$/;"	f	class:worldsinglethread	signature:()
worldsinglethread::~worldsinglethread	physLib/src/world/worldsinglethread.h	/^    ~worldsinglethread();$/;"	p	class:worldsinglethread	access:public	signature:()
writeToFile	source/FileIO.cpp	/^void FileIO::writeToFile(std::vector<ModelInfo> modelContainer, const char* filename)$/;"	f	class:FileIO	signature:(std::vector<ModelInfo> modelContainer, const char* filename)
writeToFile	source/FileIO.h	/^        static void writeToFile(std::vector<ModelInfo> modelContainer, const char* filename);$/;"	p	class:FileIO	access:public	signature:(std::vector<ModelInfo> modelContainer, const char* filename)
zDistance	source/Mode.cpp	/^float                       Mode::zDistance     =0.0f;$/;"	m	class:Mode	file:
zDistance	source/Mode.h	/^        static float zDistance;$/;"	m	class:Mode	access:protected
~AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	AnimatedMeshToShapeConverter::~AnimatedMeshToShapeConverter()$/;"	f	class:BtOgre::AnimatedMeshToShapeConverter	signature:()
~AnimatedMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	~AnimatedMeshToShapeConverter();$/;"	p	class:BtOgre::AnimatedMeshToShapeConverter	access:public	signature:()
~Convert	physLib/src/btOgre/BtOgreExtras.h	/^	~Convert() {};$/;"	f	class:BtOgre::Convert	access:public	signature:()
~DebugDrawer	physLib/src/btOgre/BtOgreExtras.h	/^	~DebugDrawer()$/;"	f	class:BtOgre::DebugDrawer	access:public	signature:()
~DemoApp	source/DemoApp.cpp	/^DemoApp::~DemoApp()$/;"	f	class:DemoApp	signature:()
~DemoApp	source/DemoApp.h	/^	~DemoApp();$/;"	p	class:DemoApp	access:public	signature:()
~DynamicLines	physLib/src/btOgre/BtOgre.cpp	/^	DynamicLines::~DynamicLines()$/;"	f	class:BtOgre::DynamicLines	signature:()
~DynamicLines	physLib/src/btOgre/BtOgreExtras.h	/^  virtual ~DynamicLines();$/;"	p	class:BtOgre::DynamicLines	access:public	signature:()
~DynamicRenderable	physLib/src/btOgre/BtOgre.cpp	/^	DynamicRenderable::~DynamicRenderable()$/;"	f	class:BtOgre::DynamicRenderable	signature:()
~DynamicRenderable	physLib/src/btOgre/BtOgreExtras.h	/^  virtual ~DynamicRenderable();$/;"	p	class:BtOgre::DynamicRenderable	access:public	signature:()
~FirstPersonNoClip	source/FirstPersonNoClip.cpp	/^FirstPersonNoClip::~FirstPersonNoClip()$/;"	f	class:FirstPersonNoClip	signature:()
~FirstPersonNoClip	source/FirstPersonNoClip.h	/^        ~FirstPersonNoClip();$/;"	p	class:FirstPersonNoClip	access:public	signature:()
~MainWindow	include/mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow	access:public	signature:()
~Mode	source/Mode.cpp	/^Mode::~Mode()$/;"	f	class:Mode	signature:()
~Mode	source/Mode.h	/^        ~Mode();$/;"	p	class:Mode	access:public	signature:()
~Object	physLib/src/object/object.cpp	/^Object::~Object()$/;"	f	class:Object	signature:()
~Object	physLib/src/object/object.h	/^    ~Object();$/;"	p	class:Object	access:public	signature:()
~OgreFramework	source/OgreFramework.cpp	/^OgreFramework::~OgreFramework()$/;"	f	class:OgreFramework	signature:()
~OgreFramework	source/OgreFramework.h	/^	~OgreFramework();$/;"	p	class:OgreFramework	access:public	signature:()
~OgreWidget	include/OgreWidget.h	/^  virtual ~OgreWidget()$/;"	f	class:OgreWidget	access:public	signature:()
~RigidBody	physLib/src/object/rigidbody.cpp	/^RigidBody::~RigidBody()$/;"	f	class:RigidBody	signature:()
~RigidBody	physLib/src/object/rigidbody.h	/^    ~RigidBody();$/;"	p	class:RigidBody	access:public	signature:()
~StaticMeshToShapeConverter	physLib/src/btOgre/BtOgre.cpp	/^	StaticMeshToShapeConverter::~StaticMeshToShapeConverter()$/;"	f	class:BtOgre::StaticMeshToShapeConverter	signature:()
~StaticMeshToShapeConverter	physLib/src/btOgre/BtOgreGP.h	/^	~StaticMeshToShapeConverter();$/;"	p	class:BtOgre::StaticMeshToShapeConverter	access:public	signature:()
~VertexIndexToShape	physLib/src/btOgre/BtOgre.cpp	/^	VertexIndexToShape::~VertexIndexToShape()$/;"	f	class:BtOgre::VertexIndexToShape	signature:()
~VertexIndexToShape	physLib/src/btOgre/BtOgreGP.h	/^	~VertexIndexToShape();$/;"	p	class:BtOgre::VertexIndexToShape	access:public	signature:()
~World	physLib/src/world/world.cpp	/^World::~World()$/;"	f	class:World	signature:()
~World	physLib/src/world/world.h	/^    ~World();$/;"	p	class:World	access:public	signature:()
~WorldBase	physLib/src/world/worldbase.cpp	/^WorldBase::~WorldBase()$/;"	f	class:WorldBase	signature:()
~WorldBase	physLib/src/world/worldbase.h	/^    ~WorldBase();$/;"	p	class:WorldBase	access:public	signature:()
~softbody	physLib/src/object/softbody.cpp	/^softbody::~softbody()$/;"	f	class:softbody	signature:()
~softbody	physLib/src/object/softbody.h	/^    ~softbody();$/;"	p	class:softbody	access:public	signature:()
~worldsinglethread	physLib/src/world/worldsinglethread.cpp	/^worldsinglethread::~worldsinglethread()$/;"	f	class:worldsinglethread	signature:()
~worldsinglethread	physLib/src/world/worldsinglethread.h	/^    ~worldsinglethread();$/;"	p	class:worldsinglethread	access:public	signature:()
